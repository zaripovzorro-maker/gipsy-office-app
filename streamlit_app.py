# -*- coding: utf-8 -*-
# gipsy-office ‚Äî —É—á—ë—Ç —Ç–æ–≤–∞—Ä–æ–≤ (Streamlit + Firestore, google-auth creds)
# –í–ï–†–°–ò–Ø: –∫—Ä–∞—Å–∏–≤—ã–π UI, —É—á—ë—Ç –ø–æ—Å—Ç–∞–≤–æ–∫, QR-–∫–æ–¥—ã –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –ø–æ —Å—Å—ã–ª–∫–µ

import os
import io
import json
import time
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, List, Optional, Tuple
from collections.abc import Mapping

import streamlit as st
import pandas as pd
from google.cloud import firestore
from google.oauth2 import service_account

# ============== –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è QR ==============
try:
    import qrcode
    from PIL import Image
    QR_AVAILABLE = True
except Exception:
    QR_AVAILABLE = False
# ================================================

# –ù–æ—Ä–º—ã —Å–∫–ª–∞–¥–∞ (–¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤/—Ü–≤–µ—Ç–æ–≤)
DEFAULT_CAPACITY: Dict[str, float] = {
    "beans": 2000.0,   # –≥—Ä–∞–º–º
    "milk": 5000.0,    # –º–ª
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Firestore init ‚Äî —á–∏—Ç–∞–µ–º secrets –∏ —Å–æ–∑–¥–∞—ë–º google-auth –∫—Ä–µ–¥—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def init_firestore() -> firestore.Client:
    project_id = (st.secrets.get("PROJECT_ID") or os.getenv("PROJECT_ID") or "").strip()
    svc_raw: Any = st.secrets.get("FIREBASE_SERVICE_ACCOUNT", None)

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–±–µ–∑ —É—Ç–µ—á–µ–∫)
    st.sidebar.write("üîç Secrets:")
    st.sidebar.write(f"- PROJECT_ID: {project_id or '‚ùå –Ω–µ—Ç'}")
    st.sidebar.write(f"- FIREBASE_SERVICE_ACCOUNT type: {type(svc_raw).__name__}")

    if not project_id:
        st.error('‚ùå –í secrets –Ω–µ—Ç PROJECT_ID. –î–æ–±–∞–≤—å —Å—Ç—Ä–æ–∫—É: PROJECT_ID = "gipsy-office"')
        st.stop()
    if svc_raw is None:
        st.error("‚ùå –í secrets –Ω–µ—Ç FIREBASE_SERVICE_ACCOUNT (—Ç–∞–±–ª–∏—Ü–∞ TOML –∏–ª–∏ JSON-—Å—Ç—Ä–æ–∫–∞).")
        st.stop()

    # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ dict (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º AttrDict, dict, str(JSON))
    if isinstance(svc_raw, Mapping):
        svc = dict(svc_raw)
    elif isinstance(svc_raw, str):
        try:
            svc = json.loads(svc_raw.strip())
        except Exception:
            st.error("‚ùå FIREBASE_SERVICE_ACCOUNT –∑–∞–¥–∞–Ω —Å—Ç—Ä–æ–∫–æ–π, –Ω–æ —ç—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON.")
            st.stop()
    else:
        st.error(f"‚ùå FIREBASE_SERVICE_ACCOUNT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å mapping –∏–ª–∏ JSON-—Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(svc_raw).__name__}")
        st.stop()

    # –ë—ã—Å—Ç—Ä—ã–µ —Ñ–ª–∞–≥–∏
    st.sidebar.write(f"- has private_key: {bool(svc.get('private_key'))}")
    st.sidebar.write(f"- sa project_id: {svc.get('project_id', '‚Äî')}")

    # –°–æ–∑–¥–∞—ë–º google-auth –∫—Ä–µ–¥—ã –∏–∑ service account info
    try:
        creds = service_account.Credentials.from_service_account_info(svc)
        db = firestore.Client(project=project_id, credentials=creds)
        return db
    except Exception as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Firestore client: {e}")
        st.info("–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç —Å–µ–∫—Ä–µ—Ç–∞: [FIREBASE_SERVICE_ACCOUNT] —Å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º private_key –≤ —Ç—Ä–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö –∏ PROJECT_ID —Å–Ω–∞—Ä—É–∂–∏.")
        st.stop()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ë–î
db = init_firestore()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–ª–ª–µ–∫—Ü–∏–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _ingredients_ref():
    return db.collection("ingredients")

def _products_ref():
    return db.collection("products")

def _recipes_ref():
    return db.collection("recipes")

def _sales_ref():
    return db.collection("sales")

def _supplies_ref():
    return db.collection("supplies")  # –∂—É—Ä–Ω–∞–ª –ø–æ—Å—Ç–∞–≤–æ–∫

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –£—Ç–∏–ª–∏—Ç—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def status_label(percent: float) -> str:
    if percent >= 75: return "üü¢ –°—É–ø–µ—Ä"
    if percent >= 50: return "üü° –ù–æ—Ä–º"
    if percent >= 25: return "üü† –ì–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–∫—É–ø–∫–µ"
    return "üî¥ –°—Ä–æ—á–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å"

def color_for_percent(percent: float) -> str:
    if percent >= 75: return "#22c55e"  # green
    if percent >= 50: return "#eab308"  # yellow
    if percent >= 25: return "#f97316"  # orange
    return "#ef4444"                    # red

def get_ingredients_map() -> Dict[str, Dict[str, Any]]:
    docs = _ingredients_ref().stream()
    m: Dict[str, Dict[str, Any]] = {}
    for d in docs:
        data = d.to_dict() or {}
        m[d.id] = {
            "name": data.get("name", d.id),
            "unit": data.get("unit", "g" if d.id == "beans" else "ml"),
            "capacity": float(data.get("capacity", DEFAULT_CAPACITY.get(d.id, 0))),
            "stock_quantity": float(data.get("stock_quantity", 0)),
        }
    return m

def format_recipe_line(recipe_item: Dict[str, Any], ing_map: Dict[str, Dict[str, Any]]) -> str:
    ing_id = recipe_item.get("ingredientId")
    qty = float(recipe_item.get("qtyPer", 0))
    meta = ing_map.get(ing_id, {"name": ing_id, "unit": ""})
    unit = meta.get("unit", "")
    name = meta.get("name", ing_id)
    amount = int(qty) if qty.is_integer() else qty
    return f"- {name}: {amount} {unit}".strip()

def percent(cur: float, cap: float) -> int:
    cap = cap or 1
    return int(round(100 * cur / cap))

def to_utc(dt_local: datetime) -> datetime:
    if dt_local.tzinfo is None:
        dt_local = dt_local.astimezone()  # –ª–æ–∫–∞–ª—å–Ω–∞—è -> aware
    return dt_local.astimezone(timezone.utc)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# CRUD
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_ingredients() -> List[Dict[str, Any]]:
    docs = _ingredients_ref().stream()
    items: List[Dict[str, Any]] = []
    for d in docs:
        data = d.to_dict() or {}
        items.append({
            "id": d.id,
            "name": data.get("name", d.id),
            "stock_quantity": float(data.get("stock_quantity", 0)),
            "unit": data.get("unit", "g" if d.id == "beans" else "ml"),
            "capacity": float(data.get("capacity", DEFAULT_CAPACITY.get(d.id, 0))),
        })
    return sorted(items, key=lambda x: x["id"])

def get_products() -> List[Dict[str, Any]]:
    docs = _products_ref().stream()
    items: List[Dict[str, Any]] = []
    for d in docs:
        # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä "capacity"
        if d.id.lower() in {"capacity", "_meta", "_settings"}:
            continue
        data = d.to_dict() or {}
        items.append({
            "id": d.id,
            "name": data.get("name", d.id),
            "price": float(data.get("price", 0)),
        })
    return sorted(items, key=lambda x: x["name"].lower())

def get_recipe(product_id: str) -> List[Dict[str, Any]]:
    doc = _recipes_ref().document(product_id).get()
    if not doc.exists:
        return []
    data = doc.to_dict() or {}
    return list(data.get("items", []))

def set_recipe(product_id: str, items: List[Dict[str, Any]]) -> Optional[str]:
    try:
        _recipes_ref().document(product_id).set({"items": items})
        return None
    except Exception as e:
        return str(e)

def set_product_price(product_id: str, new_price: float) -> Optional[str]:
    try:
        _products_ref().document(product_id).set({"price": float(new_price)}, merge=True)
        return None
    except Exception as e:
        return str(e)

def adjust_stock(ingredient_id: str, delta: float) -> Optional[str]:
    try:
        ref = _ingredients_ref().document(ingredient_id)
        snap = ref.get()
        cur = float((snap.to_dict() or {}).get("stock_quantity", 0))
        new_val = cur + delta
        if new_val < 0:
            return "‚ùå –ù–µ–ª—å–∑—è —É–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫ –≤ –º–∏–Ω—É—Å."
        ref.update({"stock_quantity": new_val})
        return None
    except Exception as e:
        return str(e)

def sell_product(product_id: str) -> Optional[str]:
    try:
        recipe = get_recipe(product_id)
        if not recipe:
            return "–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏."
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º
        for it in recipe:
            err = adjust_stock(it["ingredientId"], -float(it["qtyPer"]))
            if err:
                return err
        _sales_ref().document().set({
            "product_id": product_id,
            "ts": firestore.SERVER_TIMESTAMP,
            "items": recipe,
        })
        return None
    except Exception as e:
        return str(e)

def undo_last_sale() -> Optional[str]:
    try:
        q = _sales_ref().order_by("ts", direction=firestore.Query.DESCENDING).limit(1).stream()
        last = next(q, None)
        if not last:
            return "–ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        sale = last.to_dict() or {}
        for it in sale.get("items", []):
            adjust_stock(it["ingredientId"], float(it["qtyPer"]))
        last.reference.delete()
        return None
    except Exception as e:
        return str(e)

# ---- –ü–æ—Å—Ç–∞–≤–∫–∏ ----
def record_supply(ingredient_id: str, quantity: float, ts_local: datetime) -> Optional[str]:
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ supplies –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫."""
    try:
        ts_utc = to_utc(ts_local)
        _supplies_ref().document().set({
            "ingredient_id": ingredient_id,
            "quantity": float(quantity),
            "ts": ts_utc,
        })
        err = adjust_stock(ingredient_id, float(quantity))
        return err
    except Exception as e:
        return str(e)

def get_supplies_between(dt_from: datetime, dt_to: datetime) -> List[Dict[str, Any]]:
    dt_from_utc = to_utc(dt_from)
    dt_to_utc = to_utc(dt_to)
    q = (_supplies_ref()
         .where("ts", ">=", dt_from_utc)
         .where("ts", "<", dt_to_utc)
         .order_by("ts"))
    docs = q.stream()
    out: List[Dict[str, Any]] = []
    for d in docs:
        row = d.to_dict() or {}
        row["id"] = d.id
        out.append(row)
    return out

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –û—Ç—á—ë—Ç—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_sales_between(dt_from: datetime, dt_to: datetime) -> List[Dict[str, Any]]:
    dt_from_utc = to_utc(dt_from)
    dt_to_utc = to_utc(dt_to)
    q = (_sales_ref()
         .where("ts", ">=", dt_from_utc)
         .where("ts", "<", dt_to_utc)
         .order_by("ts"))
    docs = q.stream()
    out: List[Dict[str, Any]] = []
    for d in docs:
        row = d.to_dict() or {}
        row["id"] = d.id
        out.append(row)
    return out

def aggregate_sales(sales: List[Dict[str, Any]]) -> Tuple[pd.DataFrame, pd.DataFrame]:
    by_product: Dict[str, int] = {}
    by_ingredient: Dict[str, float] = {}
    for s in sales:
        pid = s.get("product_id", "unknown")
        by_product[pid] = by_product.get(pid, 0) + 1
        for it in s.get("items", []):
            ing = it.get("ingredientId")
            qty = float(it.get("qtyPer", 0))
            by_ingredient[ing] = by_ingredient.get(ing, 0.0) + qty

    df_prod = pd.DataFrame([{"product_id": k, "count": v} for k, v in by_product.items()]).sort_values("count", ascending=False) if by_product else pd.DataFrame(columns=["product_id", "count"])
    df_ing = pd.DataFrame([{"ingredient_id": k, "qty": v} for k, v in by_ingredient.items()]).sort_values("qty", ascending=False) if by_ingredient else pd.DataFrame(columns=["ingredient_id", "qty"])
    return df_prod, df_ing

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# UI ‚Äî –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ + —Å—Ç–∏–ª—å
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
st.set_page_config(page_title="gipsy-office ‚Äî —É—á—ë—Ç", page_icon="‚òï", layout="wide")
st.markdown("""
<style>
:root { --brand:#0ea5e9; --bg:#f8fafc; --card:#ffffff; --muted:#475569; }
html, body, [data-testid="stAppViewContainer"] { background: var(--bg); }
.big-card { background: var(--card); border:1px solid rgba(0,0,0,0.08); border-radius:16px; padding:16px; }
.big-btn { display:block; width:100%; font-size:18px; padding:14px 16px; border-radius:12px; border:none; background:var(--brand); color:white; cursor:pointer;}
.big-btn:hover { filter:brightness(1.05);}
.pill { display:inline-block; padding:4px 10px; border-radius:999px; background:#dcfce7; color:#166534; font-weight:600; }
.progress { width:100%; height:12px; background:#e2e8f0; border-radius:999px; overflow:hidden; }
.progress > div { height:100%; }
.hint { color:var(--muted); font-size:13px;}
.card-border-green { border:2px solid #22c55e; background: #e8fbe9; }
.grid { display:grid; grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); gap:12px; }
</style>
""", unsafe_allow_html=True)

st.title("‚òï gipsy-office ‚Äî —É—á—ë—Ç —Å–ø–∏—Å–∞–Ω–∏–π")

# ‚îÄ‚îÄ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –ø–æ —Å—Å—ã–ª–∫–µ (?ingredient=milk&quick=supply)
def get_query_params():
    try:
        return st.query_params  # new API
    except Exception:
        return st.experimental_get_query_params()

qp = get_query_params() or {}
quick_ing = (qp.get("ingredient") or [""])[0]
quick_mode = (qp.get("quick") or [""])[0]  # "supply"

if quick_ing:
    with st.sidebar:
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º")
        st.write(f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: **{quick_ing}**")
        c1, c2, c3 = st.columns(3)
        if c1.button("+50"):  adjust_stock(quick_ing, 50);  st.rerun()
        if c2.button("+100"): adjust_stock(quick_ing, 100); st.rerun()
        if c3.button("+500"): adjust_stock(quick_ing, 500); st.rerun()
        st.write("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É (—Å–µ–π—á–∞—Å):")
        qty = st.number_input("–û–±—ä–µ–º", min_value=0.0, step=10.0, key="qs_qty")
        if st.button("‚ûï –ü–æ—Å—Ç–∞–≤–∫–∞ —Å–µ–π—á–∞—Å"):
            err = record_supply(quick_ing, qty, datetime.now())
            st.success("–ü–æ—Å—Ç–∞–≤–∫–∞ —É—á—Ç–µ–Ω–∞") if not err else st.error(err)
            st.rerun()

# –ü–µ—Ä–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
with st.expander("‚öôÔ∏è –ü–µ—Ä–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ / —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    if st.button("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        try:
            _ingredients_ref().document("beans").set({"name": "–ó—ë—Ä–Ω–∞", "stock_quantity": 2000, "unit": "g", "capacity": 2000})
            _ingredients_ref().document("milk").set({"name": "–ú–æ–ª–æ–∫–æ", "stock_quantity": 5000, "unit": "ml", "capacity": 5000})
            _products_ref().document("cappuccino").set({"name": "–ö–∞–ø—É—á–∏–Ω–æ", "price": 250})
            _products_ref().document("espresso").set({"name": "–≠—Å–ø—Ä–µ—Å—Å–æ", "price": 150})
            _recipes_ref().document("cappuccino").set({"items": [
                {"ingredientId": "beans", "qtyPer": 18},
                {"ingredientId": "milk",  "qtyPer": 180},
            ]})
            _recipes_ref().document("espresso").set({"items": [
                {"ingredientId": "beans", "qtyPer": 18},
            ]})
            st.success("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. –û–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")

# –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4, tab5 = st.tabs(["–ü–æ–∑–∏—Ü–∏–∏", "–°–∫–ª–∞–¥", "–†–µ—Ü–µ–ø—Ç—ã", "–û—Ç—á—ë—Ç—ã", "QR-–∫–æ–¥—ã"])

# --- –ü–æ–∑–∏—Ü–∏–∏ (–∫–∞—Ä—Ç–æ—á–∫–∏, –ø–æ–¥—Å–≤–µ—Ç–∫–∞, —Å–æ—Å—Ç–∞–≤) ---
with tab1:
    last_sale_name = st.session_state.get("last_sale_name")
    last_sale_id = st.session_state.get("last_sale_id")
    if last_sale_name:
        st.markdown(f"<span class='pill'>–°–ø–∏—Å–∞–Ω–æ: {last_sale_name}</span>", unsafe_allow_html=True)
        st.write("")

    prods = get_products()
    ing_map = get_ingredients_map()

    if not prods:
        st.info("–î–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ Firestore.")
    else:
        st.markdown("<div class='grid'>", unsafe_allow_html=True)
        for p in prods:
            recipe = get_recipe(p["id"])
            is_last = (p["id"] == last_sale_id)
            wrapper_class = "big-card card-border-green" if is_last else "big-card"
            st.markdown(f"<div class='{wrapper_class}'>", unsafe_allow_html=True)
            st.markdown(f"**{p['name']}**")
            st.caption(f"–¶–µ–Ω–∞: {int(p['price'])} ‚ÇΩ")

            # —Å–æ—Å—Ç–∞–≤
            if recipe:
                lines = [format_recipe_line(it, ing_map) for it in recipe]
                st.markdown("<div class='hint'>–°–æ—Å—Ç–∞–≤:<br/>" + "<br/>".join(lines) + "</div>", unsafe_allow_html=True)
            else:
                st.markdown("<div class='hint'>–°–æ—Å—Ç–∞–≤ –Ω–µ –∑–∞–¥–∞–Ω</div>", unsafe_allow_html=True)

            # –±–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è
            if st.button("–°–ø–∏—Å–∞—Ç—å", key=f"sell_{p['id']}"):
                err = sell_product(p["id"])
                if err: st.error(err)
                else:
                    st.session_state["last_sale_name"] = p["name"]
                    st.session_state["last_sale_id"] = p["id"]
                    st.rerun()

            st.markdown("</div>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)

        st.divider()
        if st.button("‚Ü©Ô∏è Undo –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏"):
            err = undo_last_sale()
            if err: st.error(err)
            else:
                st.success("‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                st.session_state["last_sale_name"] = None
                st.session_state["last_sale_id"] = None
                st.rerun()

# --- –°–∫–ª–∞–¥ (—Ü–≤–µ—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã + –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø–æ—Å—Ç–∞–≤–∫–∏) ---
with tab2:
    ings = get_ingredients()
    if not ings:
        st.info("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ.")
    else:
        left, right = st.columns([2, 1])

        with left:
            st.subheader("üì¶ –°–∫–ª–∞–¥")
            for i in ings:
                cur = i["stock_quantity"]
                cap = i["capacity"] or DEFAULT_CAPACITY.get(i["id"], 1)
                pct = percent(cur, cap)
                bar_color = color_for_percent(pct)

                st.markdown(f"**{i['name']}** ‚Äî {pct}% ({int(cur)}/{int(cap)} {i['unit']}) ‚Äî {status_label(pct)}")
                st.markdown(f"""
                    <div class="progress">
                        <div style="width:{pct}%; background:{bar_color};"></div>
                    </div>
                """, unsafe_allow_html=True)

                # –±—ã—Å—Ç—Ä—ã–µ ¬± –∫–Ω–æ–ø–∫–∏
                c1, c2, c3, c4, c5 = st.columns(5)
                step_small = 10 if i["unit"] == "g" else 50
                step_big   = 100 if i["unit"] == "g" else 100
                if c1.button(f"+{step_small}", key=f"p_s_{i['id']}"):  adjust_stock(i["id"], step_small);  st.rerun()
                if c2.button(f"-{step_small}", key=f"m_s_{i['id']}"):  adjust_stock(i["id"], -step_small); st.rerun()
                if c3.button(f"+{step_big}", key=f"p_b_{i['id']}"):    adjust_stock(i["id"], step_big);    st.rerun()
                if c4.button(f"-{step_big}", key=f"m_b_{i['id']}"):    adjust_stock(i["id"], -step_big);   st.rerun()
                delta = c5.number_input("¬±", value=0.0, step=1.0, key=f"delta_{i['id']}")
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", key=f"apply_{i['id']}"):
                    if delta != 0:
                        err = adjust_stock(i["id"], float(delta))
                        if err: st.error(err)
                        else: st.success("–ì–æ—Ç–æ–≤–æ"); st.rerun()
                st.write("")

        with right:
            st.subheader("‚ûï –ü–æ—Å—Ç–∞–≤–∫–∞ (–≥–ª–æ–±–∞–ª—å–Ω–æ)")
            ing_map = get_ingredients_map()
            choices = sorted([(v["name"], k) for k, v in ing_map.items()], key=lambda x: x[0].lower())
            name_to_id = {name: _id for name, _id in choices}
            sel_name = st.selectbox("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", [n for n, _ in choices])
            sel_id = name_to_id[sel_name]
            qty = st.number_input("–û–±—ä–µ–º –ø–æ—Å—Ç–∞–≤–∫–∏", min_value=0.0, step=10.0, value=0.0)
            d = st.date_input("–î–∞—Ç–∞", value=datetime.now().date())
            t = st.time_input("–í—Ä–µ–º—è", value=datetime.now().time().replace(second=0, microsecond=0))
            dt_local = datetime.combine(d, t)
            if st.button("–£—á–µ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É"):
                err = record_supply(sel_id, qty, dt_local)
                st.success("–ü–æ—Å—Ç–∞–≤–∫–∞ —É—á—Ç–µ–Ω–∞") if not err else st.error(err)
                if not err: st.rerun()

            st.divider()
            st.subheader("üìâ –ù–µ–¥–æ—Å—Ç–∞—á–∏")
            low25, low50 = [], []
            for x in ings:
                cap = x["capacity"] or DEFAULT_CAPACITY.get(x["id"], 0) or 1
                cur = x["stock_quantity"]
                p = (cur / cap) * 100
                if p < 25:
                    low25.append(f"{x['name']}: {int(cur)}/{int(cap)} ({p:.0f}%)")
                elif p < 50:
                    low50.append(f"{x['name']}: {int(cur)}/{int(cap)} ({p:.0f}%)")
            if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ <25%"):
                st.code("\n".join(low25) or "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ ‚â• 25% üëç")
            if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ <50%"):
                st.code("\n".join(low50) or "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ ‚â• 50% üëç")

# --- –†–µ—Ü–µ–ø—Ç—ã (—Ä–µ–¥–∞–∫—Ç–æ—Ä + —Ü–µ–Ω—ã) ---
with tab3:
    prods = get_products()
    ing_map = get_ingredients_map()
    if not prods:
        st.info("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –î–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ `products`.")
    else:
        st.caption("–†–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–æ—Å—Ç–∞–≤ –∏ —Ü–µ–Ω—ã")
        for p in prods:
            with st.expander(f"{p['name']} ‚Äî —Ä–µ—Ü–µ–ø—Ç –∏ —Ü–µ–Ω–∞", expanded=False):
                # —Ü–µ–Ω–∞
                price_col, save_col = st.columns([3,1])
                new_price = price_col.number_input("–¶–µ–Ω–∞, ‚ÇΩ", min_value=0.0, step=10.0, value=float(p["price"]), key=f"price_{p['id']}")
                if save_col.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—É", key=f"save_price_{p['id']}"):
                    err = set_product_price(p["id"], new_price)
                    st.success("–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞") if not err else st.error(err)
                    if not err: st.rerun()

                cur_recipe = get_recipe(p["id"])
                st.markdown("**–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤:**")
                if cur_recipe:
                    for idx, it in enumerate(cur_recipe):
                        ing_id = it.get("ingredientId")
                        qty = float(it.get("qtyPer", 0))
                        meta = ing_map.get(ing_id, {"name": ing_id, "unit": ""})
                        cols = st.columns([5, 3, 2, 2])
                        cols[0].write(meta["name"])
                        new_qty = cols[1].number_input("qty", key=f"qty_{p['id']}_{idx}", value=qty, step=1.0)
                        if cols[2].button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_{p['id']}_{idx}"):
                            cur_recipe[idx]["qtyPer"] = float(new_qty)
                            err = set_recipe(p["id"], cur_recipe)
                            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ") if not err else st.error(err)
                            if not err: st.rerun()
                        if cols[3].button("üóë –£–¥–∞–ª–∏—Ç—å", key=f"del_{p['id']}_{idx}"):
                            new_list = [r for i, r in enumerate(cur_recipe) if i != idx]
                            err = set_recipe(p["id"], new_list)
                            st.success("–£–¥–∞–ª–µ–Ω–æ") if not err else st.error(err)
                            if not err: st.rerun()
                else:
                    st.info("–°–æ—Å—Ç–∞–≤ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.")

                st.markdown("---")
                ing_choices = sorted([(v["name"], k) for k, v in ing_map.items()], key=lambda x: x[0].lower())
                name_to_id = {name: _id for name, _id in ing_choices}
                select_name = st.selectbox("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", [n for n, _ in ing_choices], key=f"add_sel_{p['id']}")
                add_id = name_to_id.get(select_name)
                default_unit = ing_map.get(add_id, {}).get("unit", "")
                add_qty = st.number_input(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ({default_unit})", min_value=0.0, step=1.0, key=f"add_qty_{p['id']}")
                if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ—Ü–µ–ø—Ç", key=f"add_btn_{p['id']}"):
                    new_items = list(cur_recipe) if cur_recipe else []
                    for item in new_items:
                        if item.get("ingredientId") == add_id:
                            item["qtyPer"] = float(add_qty)
                            break
                    else:
                        new_items.append({"ingredientId": add_id, "qtyPer": float(add_qty)})
                    err = set_recipe(p["id"], new_items)
                    st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ") if not err else st.error(err)
                    if not err: st.rerun()

# --- –û—Ç—á—ë—Ç—ã (–ø—Ä–æ–¥–∞–∂–∏ + —Å—É–º–º–∞—Ä–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è + –ø–æ—Å—Ç–∞–≤–∫–∏) ---
with tab4:
    st.subheader("üìä –û—Ç—á—ë—Ç—ã")
    today = datetime.now().date()
    col_from, col_to, col_btn = st.columns([3,3,2])
    d_from = col_from.date_input("–°", value= today)
    d_to = col_to.date_input("–ü–æ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)", value= today)
    start_dt = datetime.combine(d_from, datetime.min.time()).astimezone()
    end_dt = datetime.combine(d_to, datetime.min.time()).astimezone() + timedelta(days=1)

    if col_btn.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å"):
        sales = get_sales_between(start_dt, end_dt)
        if not sales:
            st.info("–ü—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç.")
        else:
            df_prod, df_ing = aggregate_sales(sales)
            prods_map = {p["id"]: p["name"] for p in get_products()}
            ings_map = get_ingredients_map()

            if not df_prod.empty:
                df_prod["product_name"] = df_prod["product_id"].map(lambda x: prods_map.get(x, x))
                st.markdown("**–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º**")
                st.dataframe(df_prod[["product_name", "count"]].rename(columns={"product_name": "–ü–æ–∑–∏—Ü–∏—è", "count": "–ö–æ–ª-–≤–æ"}), hide_index=True, use_container_width=True)
                st.download_button("–°–∫–∞—á–∞—Ç—å CSV (–ø–æ–∑–∏—Ü–∏–∏)", data=df_prod.to_csv(index=False).encode("utf-8"), file_name=f"sales_by_product_{d_from}_{d_to}.csv", mime="text/csv")

            if not df_ing.empty:
                df_ing["ingredient_name"] = df_ing["ingredient_id"].map(lambda x: ings_map.get(x, {}).get("name", x))
                df_ing["unit"] = df_ing["ingredient_id"].map(lambda x: ings_map.get(x, {}).get("unit", ""))
                st.markdown("**–°—É–º–º–∞—Ä–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤**")
                st.dataframe(df_ing[["ingredient_name", "qty", "unit"]].rename(columns={"ingredient_name": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", "qty": "–ö–æ–ª-–≤–æ"}), hide_index=True, use_container_width=True)
                st.download_button("–°–∫–∞—á–∞—Ç—å CSV (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)", data=df_ing.to_csv(index=False).encode("utf-8"), file_name=f"ingredients_usage_{d_from}_{d_to}.csv", mime="text/csv")

        # –ü–æ—Å—Ç–∞–≤–∫–∏
        st.markdown("---")
        st.markdown("**–ü–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥**")
        supplies = get_supplies_between(start_dt, end_dt)
        if not supplies:
            st.info("–ü–æ—Å—Ç–∞–≤–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç.")
        else:
            ing_map = get_ingredients_map()
            rows = []
            for s in supplies:
                iid = s.get("ingredient_id")
                rows.append({
                    "–î–∞—Ç–∞/–≤—Ä–µ–º—è (UTC)": s.get("ts"),
                    "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": ing_map.get(iid, {}).get("name", iid),
                    "–ö–æ–ª-–≤–æ": s.get("quantity"),
                    "–ï–¥.": ing_map.get(iid, {}).get("unit", ""),
                })
            df_sup = pd.DataFrame(rows)
            st.dataframe(df_sup, hide_index=True, use_container_width=True)
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV (–ø–æ—Å—Ç–∞–≤–∫–∏)", data=df_sup.to_csv(index=False).encode("utf-8"), file_name=f"supplies_{d_from}_{d_to}.csv", mime="text/csv")

# --- QR-–∫–æ–¥—ã (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã) ---
with tab5:
    st.subheader("üî≥ QR-–∫–æ–¥—ã –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤")
    st.caption("–°–∫–∞–Ω–∏—Ä—É–π —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞; —Å—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞.")
    base_url = st.secrets.get("PUBLIC_APP_URL") or ""  # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ secrets, –∏–Ω–∞—á–µ –≤–æ–∑—å–º—ë–º —Ç–µ–∫—É—â–∏–π URL
    if not base_url:
        st.info("–°–æ–≤–µ—Ç: –¥–æ–±–∞–≤—å –≤ secrets —Å—Ç—Ä–æ–∫—É `PUBLIC_APP_URL = \"https://<—Ç–≤–æ–π-deploy>.streamlit.app\"`, —á—Ç–æ–±—ã QR —Å—Å—ã–ª–∞–ª—Å—è –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å.")
    ings_map = get_ingredients_map()
    for ing_id, meta in ings_map.items():
        name = meta.get("name", ing_id)
        # —Å–æ–±–µ—Ä—ë–º —Å—Å—ã–ª–∫—É: ?ingredient=<id>&quick=supply
        if base_url:
            url = f"{base_url}?ingredient={ing_id}&quick=supply"
        else:
            # fallback ‚Äî –ø–æ–∫–∞–∂–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            url = f"?ingredient={ing_id}&quick=supply"

        st.markdown(f"**{name}**  \n{url}")
        if QR_AVAILABLE and base_url:
            img = qrcode.make(url)
            buf = io.BytesIO()
            img.save(buf, format="PNG")
            st.image(buf.getvalue(), width=140)
            st.download_button("–°–∫–∞—á–∞—Ç—å QR (PNG)", data=buf.getvalue(), file_name=f"qr_{ing_id}.png", mime="image/png")
        st.write("")
