# -*- coding: utf-8 -*-
# gipsy-office ‚Äî —É—á—ë—Ç —Ç–æ–≤–∞—Ä–æ–≤ (Streamlit + Firestore, google-auth creds)
import os
import json
import time
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, List, Optional, Tuple
from collections.abc import Mapping
from urllib.parse import urlencode, quote

import streamlit as st
import pandas as pd
from google.cloud import firestore
from google.oauth2 import service_account

# =========================
# 1) Firestore init
# =========================
def init_firestore() -> firestore.Client:
    project_id = (st.secrets.get("PROJECT_ID") or os.getenv("PROJECT_ID") or "").strip()
    svc_raw: Any = st.secrets.get("FIREBASE_SERVICE_ACCOUNT", None)

    if not project_id:
        st.error('‚ùå –í secrets –Ω–µ—Ç PROJECT_ID. –î–æ–±–∞–≤—å —Å—Ç—Ä–æ–∫—É: PROJECT_ID = "gipsy-office"')
        st.stop()
    if svc_raw is None:
        st.error("‚ùå –í secrets –Ω–µ—Ç FIREBASE_SERVICE_ACCOUNT (—Ç–∞–±–ª–∏—Ü–∞ TOML –∏–ª–∏ JSON-—Å—Ç—Ä–æ–∫–∞).")
        st.stop()

    if isinstance(svc_raw, Mapping):
        svc = dict(svc_raw)
    elif isinstance(svc_raw, str):
        svc = json.loads(svc_raw.strip())
    else:
        st.error(f"‚ùå FIREBASE_SERVICE_ACCOUNT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å mapping –∏–ª–∏ JSON-—Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(svc_raw).__name__}")
        st.stop()

    creds = service_account.Credentials.from_service_account_info(svc)
    return firestore.Client(project=project_id, credentials=creds)

db = init_firestore()

# =========================
# 2) Collections & helpers
# =========================
DEFAULT_CAPACITY: Dict[str, float] = {"beans": 2000.0, "milk": 5000.0}
def _ingredients_ref(): return db.collection("ingredients")
def _products_ref():    return db.collection("products")
def _recipes_ref():     return db.collection("recipes")
def _sales_ref():       return db.collection("sales")
def _supplies_ref():    return db.collection("supplies")

def status_label(percent: float) -> str:
    if percent >= 75: return "üü¢ –°—É–ø–µ—Ä"
    if percent >= 50: return "üü° –ù–æ—Ä–º"
    if percent >= 25: return "üü† –ì–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–∫—É–ø–∫–µ"
    return "üî¥ –°—Ä–æ—á–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å"

def percent(cur: float, cap: float) -> int:
    cap = cap or 1
    return int(round(100 * cur / cap))

def get_ingredients() -> List[Dict[str, Any]]:
    docs = _ingredients_ref().stream()
    items: List[Dict[str, Any]] = []
    for d in docs:
        data = d.to_dict() or {}
        items.append({
            "id": d.id,
            "name": data.get("name", d.id),
            "stock_quantity": float(data.get("stock_quantity", 0)),
            "unit": data.get("unit", "g" if d.id == "beans" else "ml"),
            "capacity": float(data.get("capacity", DEFAULT_CAPACITY.get(d.id, 0))),
        })
    return sorted(items, key=lambda x: x["name"].lower())

def get_ingredients_map() -> Dict[str, Dict[str, Any]]:
    m = {}
    for i in get_ingredients():
        m[i["id"]] = {
            "name": i["name"], "unit": i["unit"],
            "capacity": i["capacity"], "stock_quantity": i["stock_quantity"]
        }
    return m

def get_products() -> List[Dict[str, Any]]:
    docs = _products_ref().stream()
    items: List[Dict[str, Any]] = []
    for d in docs:
        if d.id.lower() in {"capacity", "_meta", "_settings"}:  # –∏–≥–Ω–æ—Ä —Å–ª—É–∂–µ–±–Ω—ã—Ö
            continue
        data = d.to_dict() or {}
        items.append({"id": d.id, "name": data.get("name", d.id), "price": float(data.get("price", 0))})
    return sorted(items, key=lambda x: x["name"].lower())

def get_recipe(product_id: str) -> List[Dict[str, Any]]:
    doc = _recipes_ref().document(product_id).get()
    if not doc.exists:
        return []
    return list((doc.to_dict() or {}).get("items", []))

def set_recipe(product_id: str, items: List[Dict[str, Any]]) -> Optional[str]:
    try:
        _recipes_ref().document(product_id).set({"items": items})
        return None
    except Exception as e:
        return str(e)

def set_product_price(product_id: str, new_price: float) -> Optional[str]:
    try: _products_ref().document(product_id).set({"price": float(new_price)}, merge=True); return None
    except Exception as e: return str(e)

def adjust_stock(ingredient_id: str, delta: float) -> Optional[str]:
    try:
        ref = _ingredients_ref().document(ingredient_id)
        snap = ref.get()
        cur = float((snap.to_dict() or {}).get("stock_quantity", 0))
        new_val = cur + delta
        if new_val < 0: return "‚ùå –ù–µ–ª—å–∑—è —É–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫ –≤ –º–∏–Ω—É—Å."
        ref.update({"stock_quantity": new_val})
        return None
    except Exception as e:
        return str(e)

def add_supply(ingredient_id: str, quantity: float) -> Optional[str]:
    """–§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤–∫—É: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ + –ø–∏—à–µ–º –≤ supplies."""
    try:
        if quantity <= 0:
            return "–£–∫–∞–∂–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä—ë–º –ø–æ—Å—Ç–∞–≤–∫–∏."
        err = adjust_stock(ingredient_id, quantity)
        if err: return err
        _supplies_ref().document().set({
            "ingredient_id": ingredient_id,
            "quantity": float(quantity),
            "ts": firestore.SERVER_TIMESTAMP,
        })
        return None
    except Exception as e:
        return str(e)

def sell_product(product_id: str) -> Optional[str]:
    try:
        recipe = get_recipe(product_id)
        if not recipe: return "–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏."
        for it in recipe:
            err = adjust_stock(it["ingredientId"], -float(it["qtyPer"]))
            if err: return err
        _sales_ref().document().set({
            "product_id": product_id,
            "ts": firestore.SERVER_TIMESTAMP,
            "items": recipe,
        })
        return None
    except Exception as e:
        return str(e)

def undo_last_sale() -> Optional[str]:
    try:
        q = _sales_ref().order_by("ts", direction=firestore.Query.DESCENDING).limit(1).stream()
        last = next(q, None)
        if not last: return "–ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        sale = last.to_dict() or {}
        for it in sale.get("items", []):
            adjust_stock(it["ingredientId"], float(it["qtyPer"]))
        last.reference.delete()
        return None
    except Exception as e:
        return str(e)

def get_sales_between(dt_from: datetime, dt_to: datetime) -> List[Dict[str, Any]]:
    dt_from_utc = dt_from.astimezone(timezone.utc)
    dt_to_utc   = dt_to.astimezone(timezone.utc)
    q = (_sales_ref().where("ts", ">=", dt_from_utc).where("ts", "<", dt_to_utc).order_by("ts"))
    docs = q.stream()
    out = []
    for d in docs:
        row = d.to_dict() or {}
        row["id"] = d.id
        out.append(row)
    return out

def aggregate_sales(sales: List[Dict[str, Any]]) -> Tuple[pd.DataFrame, pd.DataFrame]:
    by_product, by_ingredient = {}, {}
    for s in sales:
        pid = s.get("product_id", "unknown")
        by_product[pid] = by_product.get(pid, 0) + 1
        for it in s.get("items", []):
            ing = it.get("ingredientId"); qty = float(it.get("qtyPer", 0))
            by_ingredient[ing] = by_ingredient.get(ing, 0.0) + qty
    df_prod = pd.DataFrame([{"product_id": k, "count": v} for k, v in by_product.items()]).sort_values("count", ascending=False) if by_product else pd.DataFrame(columns=["product_id","count"])
    df_ing  = pd.DataFrame([{"ingredient_id": k, "qty": v} for k, v in by_ingredient.items()]).sort_values("qty", ascending=False) if by_ingredient else pd.DataFrame(columns=["ingredient_id","qty"])
    return df_prod, df_ing

# =========================
# 3) Styling (light theme)
# =========================
st.set_page_config(page_title="gipsy-office ‚Äî —É—á—ë—Ç", page_icon="‚òï", layout="wide")
st.markdown("""
<style>
:root {
  --card-bg:#ffffff; --card-border:#e5e7eb; --muted:#6b7280;
  --accent:#22c55e; --accent-soft: rgba(34,197,94,.08);
  --warn:#f59e0b; --danger:#ef4444;
}
body { background:#f8fafc; }
.big-btn button[kind="secondary"] {
  width:100%; padding:16px 18px; font-size:18px; border-radius:12px;
}
.card {
  background:var(--card-bg); border:1px solid var(--card-border);
  border-radius:14px; padding:14px; margin-bottom:12px;
}
.card.highlight { border:2px solid var(--accent); background:var(--accent-soft); }
.price { color:#111827; font-weight:600; }
.caption { color:var(--muted); white-space:pre-line; }
.progress {
  width:100%; height:14px; border-radius: 999px; background:#e5e7eb; overflow:hidden;
}
.progress > div { height:100%; }
.progress.green  > div { background:#22c55e; }
.progress.yellow > div { background:#f59e0b; }
.progress.red    > div { background:#ef4444; }
.badge { display:inline-block; padding:4px 8px; border-radius:999px; background:#ecfeff; color:#0e7490; font-size:12px; }
.qr-card { display:flex; gap:16px; align-items:center; }
.qr-card img { width:120px; height:120px; border:1px solid #e5e7eb; border-radius:8px; }
</style>
""", unsafe_allow_html=True)

st.title("‚òï gipsy-office ‚Äî —É—á—ë—Ç —Å–ø–∏—Å–∞–Ω–∏–π")

# =========================
# 4) Deep-link (QR ‚Üí supply mode)
# =========================
# Streamlit 1.50: st.query_params; –Ω–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –º–æ–∂–Ω–æ st.experimental_get_query_params()
try:
    qp = st.query_params  # type: ignore[attr-defined]
except Exception:
    qp = st.experimental_get_query_params()

deeplink_mode = (qp.get("mode",[None])[0] if isinstance(qp, dict) else None)
deeplink_ingredient = (qp.get("ingredient",[None])[0] if isinstance(qp, dict) else None)

if deeplink_mode == "supply" and deeplink_ingredient:
    st.info(f"üîó –†–µ–∂–∏–º –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ QR: –≤—ã–±—Ä–∞–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç **{deeplink_ingredient}**. –í–∫–ª–∞–¥–∫–∞ ¬´–°–∫–ª–∞–¥¬ª ‚Üí —Ñ–æ—Ä–º–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.", icon="üîó")

# =========================
# 5) First-run helper
# =========================
with st.expander("‚öôÔ∏è –ü–µ—Ä–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ / —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    if st.button("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        try:
            _ingredients_ref().document("beans").set({"name":"–ó—ë—Ä–Ω–∞","stock_quantity":2000,"unit":"g","capacity":2000})
            _ingredients_ref().document("milk").set({"name":"–ú–æ–ª–æ–∫–æ","stock_quantity":5000,"unit":"ml","capacity":5000})
            _products_ref().document("cappuccino").set({"name":"–ö–∞–ø—É—á–∏–Ω–æ","price":250})
            _products_ref().document("espresso").set({"name":"–≠—Å–ø—Ä–µ—Å—Å–æ","price":150})
            _recipes_ref().document("cappuccino").set({"items":[{"ingredientId":"beans","qtyPer":18},{"ingredientId":"milk","qtyPer":180}]})
            _recipes_ref().document("espresso").set({"items":[{"ingredientId":"beans","qtyPer":18}]})
            st.success("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. –û–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")

# =========================
# 6) Tabs
# =========================
tab1, tab2, tab3, tab4, tab5 = st.tabs(["–ü–æ–∑–∏—Ü–∏–∏", "–°–∫–ª–∞–¥", "–†–µ—Ü–µ–ø—Ç—ã", "–û—Ç—á—ë—Ç—ã", "QR-–∫–æ–¥—ã"])

# -------------------------
# TAB 1 ‚Äî –ü–æ–∑–∏—Ü–∏–∏ (–∫—Ä—É–ø–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏, —è—Ä–∫–æ)
# -------------------------
with tab1:
    # —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∫–∞—Ä—Ç–æ—á–∫–∏ / –ø–ª–∏—Ç–∫–∏
    try:
        view_mode = st.segmented_control("–í–∏–¥", options=["–ö–∞—Ä—Ç–æ—á–∫–∏", "–ü–ª–∏—Ç–∫–∏"], default="–ö–∞—Ä—Ç–æ—á–∫–∏")
    except Exception:
        view_mode = st.radio("–í–∏–¥", ["–ö–∞—Ä—Ç–æ—á–∫–∏", "–ü–ª–∏—Ç–∫–∏"], horizontal=True, index=0)

    last_sale_name = st.session_state.get("last_sale_name")
    last_sale_id = st.session_state.get("last_sale_id")
    if last_sale_name:
        st.success(f"–°–ø–∏—Å–∞–Ω–æ: {last_sale_name}", icon="‚úÖ")

    prods = get_products()
    ing_map = get_ingredients_map()

    if not prods:
        st.info("–î–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ Firestore.")
    else:
        if view_mode == "–ö–∞—Ä—Ç–æ—á–∫–∏":
            cols_per_row = 3
            for i in range(0, len(prods), cols_per_row):
                row = prods[i:i+cols_per_row]
                cols = st.columns(cols_per_row)
                for col, p in zip(cols, row):
                    recipe = get_recipe(p["id"])
                    is_last = (p["id"] == last_sale_id)
                    with col:
                        st.markdown(f'<div class="card {"highlight" if is_last else ""}">', unsafe_allow_html=True)
                        st.write(f"**{p['name']}** " + ("<span class='badge'>—Ç–æ–ª—å–∫–æ —á—Ç–æ</span>" if is_last else ""), unsafe_allow_html=True)
                        st.write(f"<span class='price'>{int(p['price'])} ‚ÇΩ</span>", unsafe_allow_html=True)

                        # —Å–æ—Å—Ç–∞–≤
                        if recipe:
                            lines = []
                            for it in recipe:
                                ing = ing_map.get(it["ingredientId"], {"name": it["ingredientId"], "unit": ""})
                                qty = float(it.get("qtyPer", 0))
                                qty_text = str(int(qty)) if qty.is_integer() else f"{qty}"
                                lines.append(f"‚Ä¢ {ing['name']}: {qty_text} {ing['unit']}")
                            st.write("<div class='caption'>" + "\n".join(lines) + "</div>", unsafe_allow_html=True)
                        else:
                            st.write("<div class='caption'>–°–æ—Å—Ç–∞–≤ –Ω–µ –∑–∞–¥–∞–Ω</div>", unsafe_allow_html=True)

                        # —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö, –∫–Ω–æ–ø–∫—É ‚Äî –≤–Ω–∏–∑
                        st.markdown('<div class="grow"></div>', unsafe_allow_html=True)
                        st.markdown('<div class="big-btn">', unsafe_allow_html=True)
                        if st.button("–°–ø–∏—Å–∞—Ç—å", key=f"sell_{p['id']}", use_container_width=True):
                            err = sell_product(p["id"])
                            if err: st.error(err)
                            else:
                                st.session_state["last_sale_name"] = p["name"]
                                st.session_state["last_sale_id"] = p["id"]
                                st.rerun()
                        st.markdown('</div>', unsafe_allow_html=True)
                        st.markdown('</div>', unsafe_allow_html=True)

        else:  # ===== –ü–õ–ò–¢–ö–ò =====
            cols_per_row = 4
            for i in range(0, len(prods), cols_per_row):
                row = prods[i:i+cols_per_row]
                cols = st.columns(cols_per_row)
                for col, p in zip(cols, row):
                    with col:
                        st.markdown('<div class="tile">', unsafe_allow_html=True)
                        label = f"‚òï {p['name']}  ¬∑  <span class='price'>{int(p['price'])} ‚ÇΩ</span>"
                        clicked = st.button(label, key=f"tile_{p['id']}")
                        if clicked:
                            err = sell_product(p["id"])
                            if err: st.error(err)
                            else:
                                st.session_state["last_sale_name"] = p["name"]
                                st.session_state["last_sale_id"] = p["id"]
                                st.rerun()
                        st.markdown('</div>', unsafe_allow_html=True)

        st.divider()
        if st.button("‚Ü©Ô∏è Undo –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏"):
            err = undo_last_sale()
            if err: st.error(err)
            else:
                st.success("‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                st.session_state["last_sale_name"] = None
                st.session_state["last_sale_id"] = None
                st.rerun()

# -------------------------
# TAB 2 ‚Äî –°–∫–ª–∞–¥ (—Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã + –ü–æ—Å—Ç–∞–≤–∫–∞)
# -------------------------
with tab2:
    ings = get_ingredients()
    if not ings:
        st.info("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ.")
    else:
        left, right = st.columns([2, 1])

        # —Ñ–æ—Ä–º–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ —Å–≤–µ—Ä—Ö—É (—É—á–∏—Ç—ã–≤–∞–µ—Ç deep-link)
        with right:
            st.subheader("‚ûï –ü–æ—Å—Ç–∞–≤–∫–∞ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)")
            ing_choices = {i["name"]: i["id"] for i in ings}
            default_name = None
            if deeplink_mode == "supply" and deeplink_ingredient:
                # –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å id ‚Üí name
                for nm, _id in ing_choices.items():
                    if _id == deeplink_ingredient:
                        default_name = nm; break
            sel_name = st.selectbox("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", list(ing_choices.keys()), index=(list(ing_choices.keys()).index(default_name) if default_name in ing_choices else 0))
            sel_id = ing_choices[sel_name]
            qty = st.number_input("–û–±—ä—ë–º –ø–æ—Å—Ç–∞–≤–∫–∏", min_value=0.0, step=50.0, value=0.0)
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É"):
                err = add_supply(sel_id, float(qty))
                if err: st.error(err)
                else: st.success("–ü–æ—Å—Ç–∞–≤–∫–∞ —É—á—Ç–µ–Ω–∞"); st.rerun()

        with left:
            st.subheader("üì¶ –°–∫–ª–∞–¥")
            for i in ings:
                cur = i["stock_quantity"]; cap = i["capacity"] or DEFAULT_CAPACITY.get(i["id"], 1)
                pct = percent(cur, cap)
                # —Ü–≤–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                cls = "green" if pct>=75 else "yellow" if pct>=50 else "red" if pct<25 else "yellow"
                st.markdown(f"**{i['name']}** ‚Äî {pct}% ({int(cur)} / {int(cap)} {i['unit']}) ‚Äî {status_label(pct)}")
                st.markdown(f"""
                    <div class="progress {cls}">
                      <div style="width:{pct}%;"></div>
                    </div>
                """, unsafe_allow_html=True)
                # –±—ã—Å—Ç—Ä—ã–µ —à–∞–≥–∏
                c1, c2, c3, c4, c5 = st.columns(5)
                step_small = 10 if i["unit"] == "g" else 50
                step_big   = 100 if i["unit"] == "g" else 100
                if c1.button(f"+{step_small}", key=f"p_s_{i['id']}"):  adjust_stock(i["id"], step_small);  st.rerun()
                if c2.button(f"-{step_small}", key=f"m_s_{i['id']}"):  adjust_stock(i["id"], -step_small); st.rerun()
                if c3.button(f"+{step_big}", key=f"p_b_{i['id']}"):    adjust_stock(i["id"], step_big);    st.rerun()
                if c4.button(f"-{step_big}", key=f"m_b_{i['id']}"):    adjust_stock(i["id"], -step_big);   st.rerun()
                delta = c5.number_input("¬±", value=0.0, step=1.0, key=f"delta_{i['id']}")
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", key=f"apply_{i['id']}"):
                    if delta != 0:
                        err = adjust_stock(i["id"], float(delta))
                        if err: st.error(err)
                        else: st.success("–ì–æ—Ç–æ–≤–æ"); st.rerun()
                st.write("")

# -------------------------
# TAB 3 ‚Äî –†–µ—Ü–µ–ø—Ç—ã (—Ä–µ–¥–∞–∫—Ç–æ—Ä + —Ü–µ–Ω–∞ + –¥—É–±–ª–∏–∫–∞—Ç–æ—Ä)
# -------------------------
with tab3:
    prods = get_products(); ing_map = get_ingredients_map()
    if not prods:
        st.info("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –î–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ `products`.")
    else:
        st.caption("–†–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å–æ—Å—Ç–∞–≤, —Ü–µ–Ω—ã –∏ –¥—É–±–ª–∏—Ä—É–π —Ä–µ—Ü–µ–ø—Ç—ã –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.")
        # –î—É–±–ª–∏–∫–∞—Ç–æ—Ä
        names = [p["name"] for p in prods]; id_by_name = {p["name"]: p["id"] for p in prods}
        col_a, col_b, col_btn = st.columns([4,4,2])
        src_name = col_a.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫", names, key="dup_src")
        dst_name = col_b.selectbox("–¶–µ–ª—å", [n for n in names if n != src_name], key="dup_dst")
        if col_btn.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤"):
            err = set_recipe(id_by_name[src_name], get_recipe(id_by_name[src_name]))
            if err: st.error(err)
            else:
                items = get_recipe(id_by_name[src_name])
                err2 = set_recipe(id_by_name[dst_name], items)
                st.success(f"–°–æ—Å—Ç–∞–≤ {src_name} ‚Üí {dst_name} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω.") if not err2 else st.error(err2)

        st.divider()

        for p in prods:
            with st.expander(f"{p['name']} ‚Äî —Ä–µ—Ü–µ–ø—Ç –∏ —Ü–µ–Ω–∞", expanded=False):
                price_col, save_col = st.columns([3,1])
                new_price = price_col.number_input("–¶–µ–Ω–∞, ‚ÇΩ", min_value=0.0, step=10.0, value=float(p["price"]), key=f"price_{p['id']}")
                if save_col.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—É", key=f"save_price_{p['id']}"):
                    err = set_product_price(p["id"], new_price)
                    st.success("–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞") if not err else st.error(err)

                cur_recipe = get_recipe(p["id"])
                st.markdown("**–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤:**")
                if cur_recipe:
                    for idx, it in enumerate(cur_recipe):
                        ing_id = it.get("ingredientId"); qty = float(it.get("qtyPer", 0))
                        meta = ing_map.get(ing_id, {"name": ing_id, "unit": ""})
                        cols = st.columns([5, 3, 2, 2])
                        cols[0].write(meta["name"])
                        new_qty = cols[1].number_input("qty", key=f"qty_{p['id']}_{idx}", value=qty, step=1.0)
                        if cols[2].button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_{p['id']}_{idx}"):
                            cur_recipe[idx]["qtyPer"] = float(new_qty)
                            err = set_recipe(p["id"], cur_recipe)
                            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ") if not err else st.error(err)
                        if cols[3].button("üóë –£–¥–∞–ª–∏—Ç—å", key=f"del_{p['id']}_{idx}"):
                            new_list = [r for i, r in enumerate(cur_recipe) if i != idx]
                            err = set_recipe(p["id"], new_list)
                            st.success("–£–¥–∞–ª–µ–Ω–æ") if not err else st.error(err)
                else:
                    st.info("–°–æ—Å—Ç–∞–≤ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.")

                st.markdown("---")
                st.markdown("**–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:**")
                ing_choices = sorted([(v["name"], k) for k, v in ing_map.items()], key=lambda x: x[0].lower())
                name_to_id = {name: _id for name, _id in ing_choices}
                select_name = st.selectbox("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", [n for n, _ in ing_choices], key=f"add_sel_{p['id']}")
                add_id = name_to_id.get(select_name)
                default_unit = ing_map.get(add_id, {}).get("unit", "")
                add_qty = st.number_input(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ({default_unit})", min_value=0.0, step=1.0, key=f"add_qty_{p['id']}")
                if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ—Ü–µ–ø—Ç", key=f"add_btn_{p['id']}"):
                    new_items = list(cur_recipe) if cur_recipe else []
                    for item in new_items:
                        if item.get("ingredientId") == add_id:
                            item["qtyPer"] = float(add_qty); break
                    else:
                        new_items.append({"ingredientId": add_id, "qtyPer": float(add_qty)})
                    err = set_recipe(p["id"], new_items)
                    st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ") if not err else st.error(err)

# -------------------------
# TAB 4 ‚Äî –û—Ç—á—ë—Ç—ã
# -------------------------
with tab4:
    st.subheader("üìä –û—Ç—á—ë—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")
    today = datetime.now().date()
    col_from, col_to, col_btn = st.columns([3,3,2])
    d_from = col_from.date_input("–°", value=today)
    d_to   = col_to.date_input("–ü–æ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)", value=today)
    start_dt = datetime.combine(d_from, datetime.min.time()).astimezone()
    end_dt   = datetime.combine(d_to, datetime.min.time()).astimezone() + timedelta(days=1)
    if col_btn.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å"):
        sales = get_sales_between(start_dt, end_dt)
        if not sales: st.info("–ü—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç.")
        else:
            df_prod, df_ing = aggregate_sales(sales)
            prods_map = {p["id"]: p["name"] for p in get_products()}
            ings_map  = get_ingredients_map()

            if not df_prod.empty:
                df_prod["product_name"] = df_prod["product_id"].map(lambda x: prods_map.get(x, x))
                st.markdown("**–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º**")
                st.dataframe(df_prod[["product_name","count"]].rename(columns={"product_name":"–ü–æ–∑–∏—Ü–∏—è","count":"–ö–æ–ª-–≤–æ"}), hide_index=True, use_container_width=True)
                st.download_button("–°–∫–∞—á–∞—Ç—å CSV (–ø–æ–∑–∏—Ü–∏–∏)", data=df_prod.to_csv(index=False).encode("utf-8"), file_name=f"sales_by_product_{d_from}_{d_to}.csv", mime="text/csv")
            if not df_ing.empty:
                df_ing["ingredient_name"] = df_ing["ingredient_id"].map(lambda x: ings_map.get(x, {}).get("name", x))
                df_ing["unit"] = df_ing["ingredient_id"].map(lambda x: ings_map.get(x, {}).get("unit", ""))
                st.markdown("**–°—É–º–º–∞—Ä–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤**")
                st.dataframe(df_ing[["ingredient_name","qty","unit"]].rename(columns={"ingredient_name":"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç","qty":"–ö–æ–ª-–≤–æ"}), hide_index=True, use_container_width=True)
                st.download_button("–°–∫–∞—á–∞—Ç—å CSV (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)", data=df_ing.to_csv(index=False).encode("utf-8"), file_name=f"ingredients_usage_{d_from}_{d_to}.csv", mime="text/csv")

# -------------------------
# TAB 5 ‚Äî QR-–∫–æ–¥—ã (–¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ‚Üí —Ä–µ–∂–∏–º –ø–æ—Å—Ç–∞–≤–∫–∏)
# -------------------------
with tab5:
    st.subheader("üì± QR-–∫–æ–¥—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")
    st.caption("–°–∫–∞–Ω–∏—Ä—É–π QR ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ ¬´–ü–æ—Å—Ç–∞–≤–∫–∞¬ª —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º.")

    # –ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –≤ secrets –∫–∞–∫ APP_BASE_URL, –ª–∏–±–æ –≤–≤–µ—Å—Ç–∏ —Ç—É—Ç
    base_url_secret = st.secrets.get("APP_BASE_URL", "")
    base_url = st.text_input("–ë–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", value=base_url_secret or st.session_state.get("base_url",""))
    st.session_state["base_url"] = base_url

    if not base_url:
        st.warning("–£–∫–∞–∂–∏ –±–∞–∑–æ–≤—ã–π URL (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://gipsy-office-app.streamlit.app). –¢–æ–≥–¥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è QR-–∫–æ–¥—ã.")
    else:
        ings = get_ingredients()
        for i in ings:
            ing_id = i["id"]; ing_name = i["name"]
            params = {"mode":"supply","ingredient":ing_id}
            target = f"{base_url}/?{urlencode(params)}"
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (—á–µ—Ä–µ–∑ Google Chart API)
            qr_url = f"https://chart.googleapis.com/chart?cht=qr&chs=300x300&chl={quote(target)}&chld=L|0"
            with st.container():
                st.markdown('<div class="card qr-card">', unsafe_allow_html=True)
                st.image(qr_url, caption=None, use_column_width=False)
                st.write(f"**{ing_name}**  \n{target}")
                st.markdown('</div>', unsafe_allow_html=True)
