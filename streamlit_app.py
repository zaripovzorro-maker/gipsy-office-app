# streamlit_app.py
import os
import json
import streamlit as st
from google.cloud import firestore
from google.oauth2 import service_account

# ======================================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ (—á—Ç–æ–±—ã Streamlit –≤–∏–¥–µ–ª –ø–∞–∫–µ—Ç app/)
# ======================================================
import sys
sys.path.insert(0, os.path.dirname(__file__))

from app.ui_sale import render_sale
from app.ui_inventory import render_inventory
from app.ui_reports import render_reports


# ======================================================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firestore
# ======================================================
@st.cache_resource
def init_firestore():
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Firestore —á–µ—Ä–µ–∑ Streamlit Secrets"""
    project_id = st.secrets.get("PROJECT_ID")
    svc = st.secrets.get("FIREBASE_SERVICE_ACCOUNT")

    if not svc:
        st.error("‚ùå –í —Å–µ–∫—Ä–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç FIREBASE_SERVICE_ACCOUNT")
        st.stop()

    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, TOML –∏–ª–∏ JSON
        if isinstance(svc, str):
            data = json.loads(svc)
        else:
            data = dict(svc)

        creds = service_account.Credentials.from_service_account_info(data)
        db = firestore.Client(credentials=creds, project=project_id)
        return db

    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firestore: {e}")
        st.stop()


# ======================================================
# –û—Å–Ω–æ–≤–Ω–æ–π UI
# ======================================================
def main():
    st.set_page_config(
        page_title="Gipsy Office ‚Äî —É—á—ë—Ç",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    st.title("gipsy office ‚Äî —É—á—ë—Ç")

    db = init_firestore()

    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio(
        "",
        ["–ü—Ä–æ–¥–∞–∂–∏", "–°–∫–ª–∞–¥", "–†–µ—Ü–µ–ø—Ç—ã ‚Ä¢ –û—Ç—á—ë—Ç—ã"],
        index=0,
        horizontal=False,
    )

    # –û—Ç–ª–∞–¥–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
    with st.sidebar.expander("üîç Secrets check"):
        st.write("‚Ä¢ PROJECT_ID present:", bool(st.secrets.get("PROJECT_ID")))
        st.write("‚Ä¢ FIREBASE_SERVICE_ACCOUNT type:", type(st.secrets.get("FIREBASE_SERVICE_ACCOUNT")).__name__)
        svc = st.secrets.get("FIREBASE_SERVICE_ACCOUNT", "")
        if isinstance(svc, str):
            st.write("‚Ä¢ contains \\n literal:", "\\n" in svc)
        if isinstance(svc, dict) and "private_key" in svc:
            pk = svc["private_key"]
            st.write("‚Ä¢ private_key length:", len(pk))
            st.write("‚Ä¢ starts with BEGIN:", pk.strip().startswith("-----BEGIN"))


    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.divider()
    if page == "–ü—Ä–æ–¥–∞–∂–∏":
        render_sale(db)
    elif page == "–°–∫–ª–∞–¥":
        render_inventory(db)
    else:
        render_reports(db)


# ======================================================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ======================================================
if __name__ == "__main__":
    main()
