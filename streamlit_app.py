import os
import sys
import json
import streamlit as st

# –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
ROOT = os.path.dirname(__file__)
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

# ===== –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–Ω—É—Ç—å –º–æ–¥—É–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—á–∏–∫–∏ =====
USE_FALLBACK = False
try:
    from app.services.firestore_client import get_db as _get_db
    from app.ui_sale import render_sale as _render_sale
    from app.ui_inventory import render_inventory as _render_inventory
    from app.ui_reports import render_reports as _render_reports
except Exception as e:
    USE_FALLBACK = True
    IMPORT_ERR = e

# ===== –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ –≤ –º–æ–¥—É–ª–µ, –∏ –≤ —Ñ–æ–ª–ª–±—ç–∫–µ) =====
from google.cloud import firestore
from google.oauth2 import service_account

def sidebar_secrets_check():
    with st.sidebar.expander("üîç Secrets check", expanded=False):
        svc = st.secrets.get("FIREBASE_SERVICE_ACCOUNT")
        st.write("PROJECT_ID present:", bool(st.secrets.get("PROJECT_ID")))
        st.write("FIREBASE_SERVICE_ACCOUNT type:", type(svc).__name__)
        if isinstance(svc, str):
            st.write("contains \\n literal:", "\\n" in svc)
            try:
                j = json.loads(svc)
                st.write("json ok:", True)
                st.write("pk begins with BEGIN:", str(j.get("private_key","")).strip().startswith("-----BEGIN"))
            except Exception as e:
                st.write("json ok:", False, str(e))
        elif isinstance(svc, dict):
            st.write("pk begins with BEGIN:", str(svc.get("private_key","")).strip().startswith("-----BEGIN"))

def list_repo_tree(max_entries=300):
    rows = []
    for root, dirs, files in os.walk(ROOT):
        # –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è —Ä–∞–∑—É–º–Ω—ã–º —á–∏—Å–ª–æ–º —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å UI
        if len(rows) > max_entries:
            rows.append("‚Ä¶ (truncated)")
            break
        rel = os.path.relpath(root, ROOT)
        rows.append(f"[DIR] {'.' if rel == '.' else rel}")
        for f in files:
            rows.append(f"     ‚îî‚îÄ {f}")
    return rows

# ====== –§–æ–ª–ª–±—ç–∫-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firestore ======
@st.cache_resource
def get_db_fallback() -> firestore.Client:
    project_id = st.secrets.get("PROJECT_ID")
    svc = st.secrets.get("FIREBASE_SERVICE_ACCOUNT")
    if not project_id:
        st.error("‚ùå –í secrets –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PROJECT_ID."); st.stop()
    if not svc:
        st.error("‚ùå –í secrets –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç FIREBASE_SERVICE_ACCOUNT."); st.stop()
    try:
        info = json.loads(svc) if isinstance(svc, str) else dict(svc)
        creds = service_account.Credentials.from_service_account_info(info)
        db = firestore.Client(credentials=creds, project=project_id)
        _ = list(db.collections())
        return db
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firestore: {e}")
        st.stop()

# ====== –§–æ–ª–ª–±—ç–∫-—ç–∫—Ä–∞–Ω—ã (–º–∏–Ω–∏–º—É–º, –Ω–æ —Ä–∞–±–æ—á–∏–µ) ======
def render_sale_fallback(db: firestore.Client):
    st.subheader("–ü—Ä–æ–¥–∞–∂–∏ (fallback)")
    st.info("–≠—Ç–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º. –ú–æ–¥—É–ª–∏ `app/...` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∏–∑—É ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∏, –∫–∞–∫ –ø–æ—á–∏–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")

def render_inventory_fallback(db: firestore.Client):
    st.subheader("–°–∫–ª–∞–¥ (fallback)")
    st.write("–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–∫—Ä—ã—Ç—å Firestore ‚Üí `inventory` ‚Äî –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã, UI –º–æ–¥—É–ª–µ–º –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞.")

def render_reports_fallback(db: firestore.Client):
    st.subheader("–†–µ—Ü–µ–ø—Ç—ã ‚Ä¢ –û—Ç—á—ë—Ç—ã (fallback)")
    st.write("–ü–æ—Å–ª–µ –ø–æ—á–∏–Ω–∫–∏ –º–æ–¥—É–ª–µ–π —Ç—É—Ç –ø–æ—è–≤—è—Ç—Å—è –æ—Ç—á—ë—Ç—ã –∏ —Ä–µ—Ü–µ–ø—Ç—ã.")

# ====== –ì–ª–∞–≤–Ω—ã–π UI ======
def main():
    st.set_page_config(page_title="Gipsy Office ‚Äî —É—á—ë—Ç", layout="wide", initial_sidebar_state="expanded")
    st.title("gipsy office ‚Äî —É—á—ë—Ç")

    # –µ—Å–ª–∏ –º–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –û–ö ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë; –∏–Ω–∞—á–µ —Ñ–æ–ª–ª–±—ç–∫
    if not USE_FALLBACK:
        get_db = _get_db
        render_sale = _render_sale
        render_inventory = _render_inventory
        render_reports = _render_reports
    else:
        get_db = get_db_fallback
        render_sale = render_sale_fallback
        render_inventory = render_inventory_fallback
        render_reports = render_reports_fallback

    db = get_db()

    st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio(
        "–†–∞–∑–¥–µ–ª",
        ["–ü—Ä–æ–¥–∞–∂–∏", "–°–∫–ª–∞–¥", "–†–µ—Ü–µ–ø—Ç—ã ‚Ä¢ –û—Ç—á—ë—Ç—ã"],
        index=0,
        label_visibility="collapsed",
    )

    sidebar_secrets_check()

    # –ï—Å–ª–∏ –º—ã –≤ —Ñ–æ–ª–ª–±—ç–∫–µ ‚Äî –ø–æ–∫–∞–∂–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞ –∏ –¥–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–∞
    if USE_FALLBACK:
        st.sidebar.markdown("---")
        st.sidebar.error("‚ö†Ô∏è –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        st.sidebar.code(f"{type(IMPORT_ERR).__name__}: {IMPORT_ERR}")
        with st.sidebar.expander("üìÅ –¢–µ–∫—É—â–µ–µ –¥–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–∞ (top)", expanded=False):
            for line in list_repo_tree():
                st.text(line)
        st.sidebar.markdown(
