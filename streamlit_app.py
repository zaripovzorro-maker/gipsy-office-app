# streamlit_app.py ‚Äî –º–æ–Ω–æ–ª–∏—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ —Ä–µ–ø–æ
# –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Streamlit Cloud –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤.

import os, sys, json, math, time
from typing import Dict, List, Tuple
import streamlit as st

# ---- Firebase ----
from google.cloud import firestore
from google.oauth2 import service_account
from google.api_core.retry import Retry


# =========================
# Firestore init (secrets)
# =========================
@st.cache_resource
def init_firestore() -> firestore.Client:
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firestore –∏–∑ Streamlit Secrets.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 2 —Ñ–æ—Ä–º–∞—Ç–∞:
      - JSON-—Å—Ç—Ä–æ–∫–∞ –≤ FIREBASE_SERVICE_ACCOUNT
      - TOML-—Ç–∞–±–ª–∏—Ü–∞ [FIREBASE_SERVICE_ACCOUNT] –≤ secrets.toml
    """
    project_id = st.secrets.get("PROJECT_ID")
    svc = st.secrets.get("FIREBASE_SERVICE_ACCOUNT")

    if not project_id:
        st.error("‚ùå –í secrets –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PROJECT_ID.")
        st.stop()

    if not svc:
        st.error("‚ùå –í secrets –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç FIREBASE_SERVICE_ACCOUNT.")
        st.stop()

    try:
        if isinstance(svc, str):
            data = json.loads(svc)
        else:
            data = dict(svc)

        # –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º -> –û–ö (google-auth —Å–∞–º —Ä–∞–∑–±–µ—Ä—ë—Ç)
        creds = service_account.Credentials.from_service_account_info(data)
        db = firestore.Client(credentials=creds, project=project_id)
        # ¬´–ø—Ä–æ–±–Ω–æ–µ¬ª —á—Ç–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø–æ–π–º–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        _ = list(db.collections())  # –Ω–µ –¥–æ—Ä–æ–≥–æ
        return db
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firestore: {e}")
        st.stop()


# =====================================
# –ß—Ç–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ Firestore (MVP)
# =====================================
def fetch_inventory(db: firestore.Client) -> Dict[str, dict]:
    inv = {}
    for doc in db.collection("inventory").stream():
        d = doc.to_dict() or {}
        inv[doc.id] = {
            "id": doc.id,
            "name": d.get("name", doc.id),
            "unit": d.get("unit", "g"),
            "capacity": float(d.get("capacity", 0)),
            "current": float(d.get("current", 0)),
            "updated_at": d.get("updated_at"),
        }
    return inv


def fetch_recipes(db: firestore.Client) -> Dict[str, dict]:
    rec = {}
    for doc in db.collection("recipes").stream():
        d = doc.to_dict() or {}
        rec[doc.id] = {
            "id": doc.id,
            "base_volume_ml": float(d.get("base_volume_ml", 200)),
            "ingredients": d.get("ingredients", []),  # [{ingredient_id, qty, unit}]
        }
    return rec


def fetch_products(db: firestore.Client) -> Dict[str, dict]:
    prods = {}
    for doc in db.collection("products").where("is_active", "==", True).stream():
        d = doc.to_dict() or {}
        prods[doc.id] = {
            "id": doc.id,
            "name": d.get("name", doc.id),
            "category": d.get("category", "–ü—Ä–æ—á–µ–µ"),
            "volumes": d.get("volumes", [200]),
            "base_price": int(d.get("base_price", 0)),
            "addons": d.get("addons", []),  # [{id,name,price_delta,ingredients:{}}]
            "recipe_ref": d.get("recipe_ref", None),  # 'recipes/xxx' –∏–ª–∏ reference
        }
    return prods


# =====================================
# –£—Ç–∏–ª–∏—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ / —Å—Ç–∞—Ç—É—Å–æ–≤
# =====================================
def fmt_money_kop(v: int) -> str:
    rub = v // 100
    kop = v % 100
    return f"{rub} ‚ÇΩ {kop:02d}"


def inv_status(capacity: float, current: float) -> Tuple[str, float]:
    ratio = current / capacity if capacity > 0 else 0.0
    if ratio > 0.75:
        return "üîµ", ratio
    if ratio > 0.50:
        return "üü°", ratio
    if ratio > 0.25:
        return "üü†", ratio
    return "üî¥", ratio


def compute_base_consumption(recipe: dict, volume_ml: float) -> Dict[str, float]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–π –æ–±—ä—ë–º."""
    base_ml = float(recipe.get("base_volume_ml", 200)) or 200.0
    k = volume_ml / base_ml
    out: Dict[str, float] = {}
    for item in recipe.get("ingredients", []):
        iid = item["ingredient_id"]
        qty = float(item["qty"])
        out[iid] = out.get(iid, 0.0) + qty * k
    return out


def sum_maps(a: Dict[str, float], b: Dict[str, float]) -> Dict[str, float]:
    out = dict(a)
    for k, v in b.items():
        out[k] = out.get(k, 0.0) + v
    return out


def consumption_for_item(product: dict, volume_ml: float, addon_ids: List[str], recipes: Dict[str, dict]) -> Dict[str, float]:
    total: Dict[str, float] = {}
    # —Ä–µ—Ü–µ–ø—Ç
    rkey = None
    if product.get("recipe_ref"):
        # –¥–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 'recipes/xxx' –∏–ª–∏ dict/—Å—Å—ã–ª–∫–∞
        if isinstance(product["recipe_ref"], str):
            rkey = product["recipe_ref"].split("/")[-1]
        elif isinstance(product["recipe_ref"], dict) and "path" in product["recipe_ref"]:
            rkey = str(product["recipe_ref"]["path"]).split("/")[-1]

    if rkey and rkey in recipes:
        total = sum_maps(total, compute_base_consumption(recipes[rkey], volume_ml))

    # –¥–æ–±–∞–≤–∫–∏
    addons = {a["id"]: a for a in product.get("addons", [])}
    for add_id in addon_ids:
        ad = addons.get(add_id)
        if not ad:
            continue
        for iid, q in (ad.get("ingredients") or {}).items():
            total[iid] = total.get(iid, 0.0) + float(q)

    return total


def total_cart_consumption(cart: List[dict], products: Dict[str, dict], recipes: Dict[str, dict]) -> Dict[str, float]:
    need: Dict[str, float] = {}
    for item in cart:
        prod = products.get(item["product_id"])
        if not prod:
            continue
        cons = consumption_for_item(prod, item["volume_ml"], item.get("addons", []), recipes)
        for k, v in cons.items():
            need[k] = need.get(k, 0.0) + v * int(item["qty"])
    return need


def find_shortages(need: Dict[str, float], inventory: Dict[str, dict]) -> List[dict]:
    shortages = []
    for iid, req in need.items():
        have = float(inventory.get(iid, {}).get("current", 0.0))
        if have + 1e-9 < req:
            shortages.append({
                "ingredient_id": iid,
                "need": req,
                "have": have,
                "deficit": req - have
            })
    return shortages


# =====================================
# –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è + –∑–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏
# =====================================
def commit_sale(db: firestore.Client, cart: List[dict], products: Dict[str, dict], recipes: Dict[str, dict]) -> Tuple[bool, str]:
    need = total_cart_consumption(cart, products, recipes)

    @firestore.transactional
    def _txn(transaction: firestore.Transaction):
        # —á–∏—Ç–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        inv_refs = {iid: db.collection("inventory").document(iid) for iid in need.keys()}
        inv_snap = {iid: inv_refs[iid].get(transaction=transaction) for iid in inv_refs}
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
        for iid, req in need.items():
            cur = float(inv_snap[iid].to_dict().get("current", 0.0) if inv_snap[iid].exists else 0.0)
            if cur + 1e-9 < req:
                raise RuntimeError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ '{iid}': –Ω—É–∂–Ω–æ {req}, –µ—Å—Ç—å {cur}")

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        for iid, req in need.items():
            cur = float(inv_snap[iid].to_dict().get("current", 0.0))
            transaction.update(inv_refs[iid], {"current": cur - req, "updated_at": firestore.SERVER_TIMESTAMP})

        # –∑–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏ + –ª–æ–≥
        total_amount = sum(int(i["price_total"]) for i in cart)
        sale_ref = db.collection("sales").document()
        transaction.set(sale_ref, {
            "created_at": firestore.SERVER_TIMESTAMP,
            "items": cart,
            "total_amount": total_amount,
            "inventory_delta": {k: -v for k, v in need.items()},
        })
        log_ref = db.collection("inventory_log").document()
        transaction.set(log_ref, {
            "created_at": firestore.SERVER_TIMESTAMP,
            "type": "sale",
            "delta": {k: -v for k, v in need.items()},
            "sale_id": sale_ref.id
        })
        return sale_ref.id

    try:
        tid = _txn(db.transaction())
        return True, tid
    except Exception as e:
        return False, str(e)


# =====================================
# UI ‚Äî –ø–ª–∞—Ç—ã/–ø–ª–∏—Ç–∫–∏/–∫–æ—Ä–∑–∏–Ω–∞ (MVP)
# =====================================
def ensure_state():
    if "cart" not in st.session_state:
        st.session_state.cart = []  # [{product_id,name,volume_ml,qty,addons,price_total}]
    if "ui" not in st.session_state:
        st.session_state.ui = {"category": None, "product": None}


def ui_sale(db: firestore.Client):
    ensure_state()

    st.subheader("–ü—Ä–æ–¥–∞–∂–∏")
    st.info("–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ **¬´–ö—É–ø–∏—Ç—å¬ª**. –î–æ —ç—Ç–æ–≥–æ –ø–æ–∑–∏—Ü–∏–∏ –ª–µ–∂–∞—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è.")

    # –≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞..."):
        inventory = fetch_inventory(db)
        recipes = fetch_recipes(db)
        products = fetch_products(db)

    if not products:
        st.warning("–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ **products** –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –î–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        return

    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cats = {}
    for p in products.values():
        cats.setdefault(p["category"], []).append(p)

    left, right = st.columns([7, 5], gap="large")

    # ------ –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ ------
    with left:
        st.markdown("### –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        cc1, cc2, cc3, cc4 = st.columns(4)
        cols = [cc1, cc2, cc3, cc4]
        ci = 0
        for cat in sorted(cats.keys()):
            with cols[ci % 4]:
                if st.button(f"üóÇÔ∏è {cat}", use_container_width=True):
                    st.session_state.ui["category"] = cat
                    st.session_state.ui["product"] = None
            ci += 1

        st.markdown("---")
        cat = st.session_state.ui.get("category") or sorted(cats.keys())[0]
        st.caption(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: **{cat}**")
        pcols = st.columns(4)
        i = 0
        for p in sorted(cats[cat], key=lambda x: x["name"]):
            with pcols[i % 4]:
                if st.button(f"‚òï {p['name']}", use_container_width=True):
                    st.session_state.ui["product"] = p["id"]
            i += 1

        st.markdown("---")
        pid = st.session_state.ui.get("product")
        if pid:
            prod = products[pid]
            st.markdown(f"#### {prod['name']}")
            vol = st.segmented_control("–û–±—ä—ë–º, –º–ª", options=prod["volumes"], selection_mode="single", key="sel_volume")
            qty = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1, 20, 1)
            # –¥–æ–±–∞–≤–∫–∏
            add_ids = []
            if prod.get("addons"):
                st.caption("–î–æ–±–∞–≤–∫–∏:")
                for add in prod["addons"]:
                    if st.checkbox(f"{add['name']} (+{fmt_money_kop(int(add.get('price_delta',0)))})", key=f"add_{pid}_{add['id']}"):
                        add_ids.append(add["id"])

            # —Ü–µ–Ω–∞
            price = int(prod["base_price"])
            for add in prod.get("addons", []):
                if add["id"] in add_ids:
                    price += int(add.get("price_delta", 0))
            total_item = price * qty

            st.write(f"**–¶–µ–Ω–∞ –∑–∞ —à—Ç.:** {fmt_money_kop(price)}  |  **–ò—Ç–æ–≥–æ:** {fmt_money_kop(total_item)}")

            if st.button("‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", type="primary"):
                st.session_state.cart.append({
                    "product_id": pid,
                    "name": prod["name"],
                    "volume_ml": float(vol),
                    "qty": int(qty),
                    "addons": add_ids,
                    "price_total": total_item
                })
                st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.")

    # ------ –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –∫–æ—Ä–∑–∏–Ω–∞ ------
    with right:
        st.markdown("### üß∫ –ö–æ—Ä–∑–∏–Ω–∞")
        cart = st.session_state.cart
        if not cart:
            st.info("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ —Å–ª–µ–≤–∞.")
        else:
            for i, it in enumerate(cart):
                st.markdown(
                    f"{i+1}. **{it['name']}** ‚Äî {int(it['volume_ml'])} –º–ª √ó {it['qty']}  "
                    f" | {fmt_money_kop(int(it['price_total']))}  "
                    f"{'(+' + ','.join(it['addons']) + ')' if it['addons'] else ''}"
                )
                rm = st.button("–£–¥–∞–ª–∏—Ç—å", key=f"rm_{i}", use_container_width=False)
                if rm:
                    cart.pop(i)
                    st.experimental_rerun()
            st.markdown("---")
            total = sum(int(i["price_total"]) for i in cart)
            st.write(f"**–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:** {fmt_money_kop(total)}")

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤
            need = total_cart_consumption(cart, products, recipes)
            shortages = find_shortages(need, inventory)
            if shortages:
                with st.expander("‚ùó –í–æ–∑–º–æ–∂–Ω–∞—è –Ω–µ—Ö–≤–∞—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ)"):
                    for s in shortages:
                        st.write(f"- {s['ingredient_id']}: –Ω—É–∂–Ω–æ {s['need']:.1f}, –µ—Å—Ç—å {s['have']:.1f} (–¥–µ—Ñ–∏—Ü–∏—Ç {s['deficit']:.1f})")
                st.warning("–ü–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –µ—Å–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—Å—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

            c1, c2 = st.columns(2)
            with c1:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", use_container_width=True):
                    st.session_state.cart = []
                    st.experimental_rerun()
            with c2:
                if st.button("üí≥ –ö—É–ø–∏—Ç—å", type="primary", use_container_width=True):
                    ok, msg = commit_sale(db, cart, products, recipes)
                    if ok:
                        st.success(f"–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ (sale_id={msg}).")
                        st.session_state.cart = []
                        st.balloons()
                    else:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂—É: {msg}")


def ui_inventory(db: firestore.Client):
    st.subheader("–°–∫–ª–∞–¥")
    inv = fetch_inventory(db)
    if not inv:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ `inventory`.")
        return

    rows = []
    for iid, d in inv.items():
        icon, ratio = inv_status(d["capacity"], d["current"])
        rows.append({
            "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç": d["name"],
            "–¢–µ–∫—É—â–µ–µ": d["current"],
            "–ï–¥.": d["unit"],
            "–ú–∞–∫—Å.": d["capacity"],
            "–°—Ç–∞—Ç—É—Å": icon,
            "–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å %": round(ratio * 100, 1),
        })

    st.dataframe(rows, use_container_width=True, hide_index=True)

    with st.expander("‚ûï –û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (–±—ã—Å—Ç—Ä–æ–µ)"):
        choice = st.selectbox("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", options=list(inv.keys()), format_func=lambda k: inv[k]["name"])
        delta = st.number_input("–ò–∑–º–µ–Ω–µ–Ω–∏–µ (–ø–ª—é—Å –∫ —Ç–µ–∫—É—â–µ–º—É)", value=0.0, step=10.0)
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
            ref = db.collection("inventory").document(choice)
            ref.update({"current": firestore.Increment(float(delta)), "updated_at": firestore.SERVER_TIMESTAMP})
            db.collection("inventory_log").add({
                "created_at": firestore.SERVER_TIMESTAMP,
                "type": "restock" if delta >= 0 else "adjust",
                "delta": {choice: float(delta)}
            })
            st.success("–û–±–Ω–æ–≤–ª–µ–Ω–æ.")
            st.experimental_rerun()


def ui_reports(db: firestore.Client):
    st.subheader("–†–µ—Ü–µ–ø—Ç—ã ‚Ä¢ –û—Ç—á—ë—Ç—ã (MVP)")
    # –¢–æ–ø –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥ ‚Äî –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    col1, col2 = st.columns(2)
    with col1:
        st.caption("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –ø—Ä–æ–¥–∞–∂:")
        sales = list(db.collection("sales").order_by("created_at", direction=firestore.Query.DESCENDING).limit(30).stream())
        if not sales:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂.")
        else:
            for s in sales:
                d = s.to_dict()
                st.write(f"- **{fmt_money_kop(int(d.get('total_amount',0)))}**, –ø–æ–∑–∏—Ü–∏–π: {len(d.get('items',[]))}")

    with col2:
        st.caption("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ –∏—Å—Ö–æ–¥–µ (üü†/üî¥):")
        inv = fetch_inventory(db)
        danger = []
        for x in inv.values():
            icon, ratio = inv_status(x["capacity"], x["current"])
            if icon in ("üü†", "üî¥"):
                danger.append(f"{icon} {x['name']} ‚Äî {x['current']}/{x['capacity']} {x['unit']}")
        if not danger:
            st.success("–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç.")
        else:
            for line in danger:
                st.write("‚Ä¢ " + line)


# =========================
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# =========================
def main():
    st.set_page_config(page_title="Gipsy Office ‚Äî —É—á—ë—Ç", layout="wide", initial_sidebar_state="expanded")
    st.title("gipsy office ‚Äî —É—á—ë—Ç")

    db = init_firestore()

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio("", ["–ü—Ä–æ–¥–∞–∂–∏", "–°–∫–ª–∞–¥", "–†–µ—Ü–µ–ø—Ç—ã ‚Ä¢ –û—Ç—á—ë—Ç—ã"], index=0)

    with st.sidebar.expander("üîç Secrets check"):
        svc = st.secrets.get("FIREBASE_SERVICE_ACCOUNT")
        st.write("PROJECT_ID:", bool(st.secrets.get("PROJECT_ID")))
        st.write("FIREBASE_SERVICE_ACCOUNT type:", type(svc).__name__)
        if isinstance(svc, str):
            st.write("contains \\n literal:", "\\n" in svc)
        if isinstance(svc, dict) and "private_key" in svc:
            pk = svc["private_key"]
            st.write("pk starts with BEGIN:", str(pk).strip().startswith("-----BEGIN"))

    st.divider()
    if page == "–ü—Ä–æ–¥–∞–∂–∏":
        ui_sale(db)
    elif page == "–°–∫–ª–∞–¥":
        ui_inventory(db)
    else:
        ui_reports(db)


if __name__ == "__main__":
    main()
