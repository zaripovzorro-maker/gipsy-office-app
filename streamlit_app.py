# -*- coding: utf-8 -*-
import os
import json
import time
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional

import streamlit as st

# --- Firebase / Firestore ---
from firebase_admin import credentials, initialize_app, _apps as firebase_apps
from google.cloud import firestore


# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–æ—Ä–º—ã)
# -------------------------------
DEFAULT_CAPACITY: Dict[str, float] = {
    "beans": 2000.0,   # –≥—Ä–∞–º–º
    "milk": 5000.0,    # –º–ª
}

# -------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firestore
# -------------------------------
def init_firestore() -> firestore.Client:
    """
    –ß–∏—Ç–∞–µ—Ç –∫–ª—é—á –∏–∑ st.secrets["FIREBASE_SERVICE_ACCOUNT"] (JSON-—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ TOML-—Ç–∞–±–ª–∏—Ü–∞)
    –∏ PROJECT_ID. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç firestore.Client.
    """
    # 1) PROJECT_ID –∏–∑ secrets –∏–ª–∏ ENV
    project_id = (st.secrets.get("PROJECT_ID") or os.getenv("PROJECT_ID") or "").strip()
    # 2) –°–∞–º –∫–ª—é—á
    svc_raw: Any = st.secrets.get("FIREBASE_SERVICE_ACCOUNT", None)

    if not project_id:
        st.error("‚ùå –í secrets –Ω–µ—Ç PROJECT_ID. –û—Ç–∫—Ä–æ–π –º–µ–Ω—é ‚ãØ ‚Üí **Edit secrets** –∏ –¥–æ–±–∞–≤—å `PROJECT_ID = \"gipsy-office\"`.")
        st.stop()

    if svc_raw is None:
        st.error("‚ùå –í secrets –Ω–µ—Ç FIREBASE_SERVICE_ACCOUNT. –í—Å—Ç–∞–≤—å **–ø–æ–ª–Ω—ã–π JSON** —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –ª–∏–±–æ TOML-—Ç–∞–±–ª–∏—Ü—É.")
        st.stop()

    # JSON-—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ TOML-—Ç–∞–±–ª–∏—Ü–∞ ‚Äî –ø—Ä–∏–≤–µ–¥—ë–º –∫ dict
    if isinstance(svc_raw, str):
        try:
            svc = json.loads(svc_raw)
        except Exception:
            st.error("‚ùå FIREBASE_SERVICE_ACCOUNT –∑–∞–¥–∞–Ω —Å—Ç—Ä–æ–∫–æ–π, –Ω–æ —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π JSON. –°–∫–æ–ø–∏—Ä—É–π –∫–ª—é—á –µ—â—ë —Ä–∞–∑ —Ü–µ–ª–∏–∫–æ–º.")
            st.stop()
    elif isinstance(svc_raw, dict):
        svc = dict(svc_raw)
    else:
        st.error("‚ùå FIREBASE_SERVICE_ACCOUNT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON-—Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–µ–π TOML (–º—ç–ø).")
        st.stop()

    # –ù–µ–±–æ–ª—å—à–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
    with st.sidebar:
        st.caption("üîé –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤")
        st.write("PROJECT_ID:", project_id)
        st.write("FIREBASE_SERVICE_ACCOUNT type:", type(svc_raw).__name__)
        st.write("has private_key:", bool(svc.get("private_key")))
        st.write("sa project_id:", svc.get("project_id"))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è firebase_admin (—Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑)
    cred = credentials.Certificate(svc)
    if not firebase_apps:
        initialize_app(cred, {"projectId": project_id})

    # –ö–ª–∏–µ–Ω—Ç Firestore —Å —è–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º/–∫—Ä–µ–¥–∏—Ç–∞–º–∏
    return firestore.Client(project=project_id, credentials=cred)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ë–î
db = init_firestore()


# -------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π
# -------------------------------
def _ingredients_ref():
    return db.collection("ingredients")


def _products_ref():
    return db.collection("products")


def _recipes_ref():
    return db.collection("recipes")


def _sales_ref():
    return db.collection("sales")


# -------------------------------
# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π
# -------------------------------
def get_ingredients() -> List[Dict[str, Any]]:
    try:
        docs = _ingredients_ref().stream()
        items: List[Dict[str, Any]] = []
        for d in docs:
            data = d.to_dict() or {}
            items.append({
                "id": d.id,
                "name": data.get("name", d.id),
                "stock_quantity": float(data.get("stock_quantity", 0)),
                "unit": data.get("unit", "g" if d.id == "beans" else "ml"),
                "capacity": float(data.get("capacity", DEFAULT_CAPACITY.get(d.id, 0))),
                "reorder_threshold": float(data.get("reorder_threshold", 0)),
            })
        return sorted(items, key=lambda x: x["id"])
    except Exception as e:
        st.error(f"‚ö†Ô∏è Firestore (ingredients) –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e.__class__.__name__}")
        st.info("–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ Firestore —Å–æ–∑–¥–∞–Ω –∏ —É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å —Ä–æ–ª—å **Cloud Datastore User**.")
        st.stop()


def get_products() -> List[Dict[str, Any]]:
    try:
        docs = _products_ref().stream()
        items: List[Dict[str, Any]] = []
        for d in docs:
            data = d.to_dict() or {}
            items.append({
                "id": d.id,
                "name": data.get("name", d.id),
                "price": float(data.get("price", 0)),
            })
        return sorted(items, key=lambda x: x["name"].lower())
    except Exception as e:
        st.error(f"‚ö†Ô∏è Firestore (products) –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e.__class__.__name__}")
        st.stop()


def get_recipe(product_id: str) -> List[Dict[str, Any]]:
    try:
        doc = _recipes_ref().document(product_id).get()
        if not doc.exists:
            return []
        data = doc.to_dict() or {}
        return list(data.get("items", []))
    except Exception as e:
        st.error(f"‚ö†Ô∏è Firestore (recipes) –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e.__class__.__name__}")
        st.stop()


# -------------------------------
# –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –ø—Ä–æ–¥–∞–∂–∞ / –æ—Ç–∫–∞—Ç
# -------------------------------
def _sell_tx(tx: firestore.Transaction, product_id: str):
    items = get_recipe(product_id)
    if not items:
        raise ValueError(f"–î–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ '{product_id}' –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞.")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º
    for it in items:
        ing_id = it["ingredientId"]
        qty = float(it["qtyPer"])

        ref = _ingredients_ref().document(ing_id)
        snap = ref.get(transaction=tx)
        if not snap.exists:
            raise ValueError(f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{ing_id}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

        data = snap.to_dict() or {}
        cur = float(data.get("stock_quantity", 0))
        if cur - qty < 0:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ '{ing_id}': –µ—Å—Ç—å {cur}, –Ω—É–∂–Ω–æ {qty}.")
        tx.update(ref, {"stock_quantity": cur - qty})

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂—É
    _sales_ref().document().set({
        "product_id": product_id,
        "ts": firestore.SERVER_TIMESTAMP,
        "items": items,
    })


def sell_product(product_id: str) -> Optional[str]:
    tx = db.transaction()
    try:
        tx.run(lambda t: _sell_tx(t, product_id))
        return None
    except Exception as e:
        return str(e)


def undo_last_sale() -> Optional[str]:
    try:
        q = _sales_ref().order_by("ts", direction=firestore.Query.DESCENDING).limit(1).stream()
        last = None
        for d in q:
            last = d
            break
        if not last:
            return "–ü—Ä–æ–¥–∞–∂ –ø–æ–∫–∞ –Ω–µ—Ç."

        sale = last.to_dict() or {}
        items: List[Dict[str, Any]] = sale.get("items", [])
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        for it in items:
            ing_id = it["ingredientId"]
            qty = float(it["qtyPer"])
            ref = _ingredients_ref().document(ing_id)
            snap = ref.get()
            cur = float((snap.to_dict() or {}).get("stock_quantity", 0))
            ref.update({"stock_quantity": cur + qty})

        last.reference.delete()
        return None
    except Exception as e:
        return str(e)


def adjust_stock(ingredient_id: str, delta: float) -> Optional[str]:
    try:
        ref = _ingredients_ref().document(ingredient_id)
        snap = ref.get()
        if not snap.exists:
            return f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{ingredient_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
        cur = float((snap.to_dict() or {}).get("stock_quantity", 0))
        new_val = cur + delta
        if new_val < 0:
            return "–ù–µ–ª—å–∑—è —É–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫ –≤ –º–∏–Ω—É—Å."
        ref.update({"stock_quantity": new_val})
        return None
    except Exception as e:
        return str(e)


# -------------------------------
# UI
# -------------------------------
st.set_page_config(page_title="gipsy-office ‚Äî —É—á—ë—Ç", page_icon="‚òï", layout="wide")
st.title("‚òï gipsy-office ‚Äî —É—á—ë—Ç —Å–ø–∏—Å–∞–Ω–∏–π")

# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
with st.expander("‚öôÔ∏è –ü–µ—Ä–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ / —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    if st.button("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Firestore"):
        try:
            # ingredients
            _ingredients_ref().document("beans").set({
                "name": "–ó—ë—Ä–Ω–∞",
                "stock_quantity": 2000,
                "unit": "g",
                "capacity": 2000,
                "reorder_threshold": 200,
            }, merge=True)
            _ingredients_ref().document("milk").set({
                "name": "–ú–æ–ª–æ–∫–æ",
                "stock_quantity": 5000,
                "unit": "ml",
                "capacity": 5000,
                "reorder_threshold": 500,
            }, merge=True)

            # products
            _products_ref().document("cappuccino").set({"name": "–ö–∞–ø—É—á–∏–Ω–æ", "price": 250}, merge=True)
            _products_ref().document("espresso").set({"name": "–≠—Å–ø—Ä–µ—Å—Å–æ", "price": 150}, merge=True)

            # recipes
            _recipes_ref().document("cappuccino").set({
                "items": [
                    {"ingredientId": "beans", "qtyPer": 18},
                    {"ingredientId": "milk", "qtyPer": 180},
                ]
            }, merge=True)
            _recipes_ref().document("espresso").set({
                "items": [
                    {"ingredientId": "beans", "qtyPer": 18},
                ]
            }, merge=True)

            st.success("–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∏–ª–∏ –Ω–∞–∂–º–∏ R).")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {e.__class__.__name__}: {e}")

tab1, tab2 = st.tabs(["–ü–æ–∑–∏—Ü–∏–∏", "–°–∫–ª–∞–¥"])

# -------------------------------
# –ü–æ–∑–∏—Ü–∏–∏ (–ø—Ä–æ–¥–∞–∂–∏)
# -------------------------------
with tab1:
    prods = get_products()
    if not prods:
        st.info("–î–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é `products`, –∞ —Ä–µ—Ü–µ–ø—Ç—ã ‚Äî –≤ `recipes`.")
    else:
        cols = st.columns(3)
        for i, p in enumerate(prods):
            with cols[i % 3]:
                st.subheader(p["name"])
                st.caption(f'–¶–µ–Ω–∞: {int(p["price"])} ‚ÇΩ')
                if st.button(f"–°–¥–µ–ª–∞—Ç—å {p['name']}", key=f"make_{p['id']}"):
                    err = sell_product(p["id"])
                    if err:
                        st.error(f"–ù–µ –ø—Ä–æ–¥–∞–Ω–æ: {err}")
                    else:
                        st.success("–°–ø–∏—Å–∞–Ω–æ –ø–æ —Ä–µ—Ü–µ–ø—Ç—É ‚úÖ")
                        time.sleep(0.4)
                        st.rerun()

    st.divider()
    if st.button("‚Ü©Ô∏è Undo –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏"):
        err = undo_last_sale()
        if err:
            st.error(err)
        else:
            st.success("–û—Ç–∫–∞—Ç–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–¥–∞–∂—É.")
            time.sleep(0.4)
            st.rerun()

# -------------------------------
# –°–∫–ª–∞–¥ (–æ—Å—Ç–∞—Ç–∫–∏, —Å—Ç–∞—Ç—É—Å—ã, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞)
# -------------------------------
def status_label(percent: float) -> str:
    if percent >= 75:
        return "üü¢ –°—É–ø–µ—Ä"
    if percent >= 50:
        return "üü° –ù–æ—Ä–º"
    if percent >= 25:
        return "üü† –ì–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–∫—É–ø–∫–µ"
    return "üî¥ –°—Ä–æ—á–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å"

with tab2:
    ings = get_ingredients()
    if not ings:
        st.info("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—ç–∫—Å–ø–∞–Ω–¥–µ—Ä –Ω–∞–≤–µ—Ä—Ö—É).")
    else:
        left_col, right_col = st.columns([2, 1])

        with left_col:
            st.subheader("–°–∫–ª–∞–¥")
            for ing in ings:
                cap = ing.get("capacity") or DEFAULT_CAPACITY.get(ing["id"], 0.0)
                cur = float(ing["stock_quantity"])
                unit = ing["unit"]
                percent = (cur / cap * 100.0) if cap > 0 else 0.0

                st.markdown(f"**{ing['name']}** ‚Äî {percent:.0f}%")
                c1, c2, c3, c4, c5 = st.columns(5)
                # –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
                step_small = 10 if unit == "g" else 50
                step_big = 100 if unit == "g" else 100

                if c1.button(f"+{step_small} {unit}", key=f"plus_s_{ing['id']}"):
                    err = adjust_stock(ing["id"], step_small)
                    st.experimental_rerun() if not err else st.error(err)
                if c2.button(f"+{step_big} {unit}", key=f"plus_b_{ing['id']}"):
                    err = adjust_stock(ing["id"], step_big)
                    st.experimental_rerun() if not err else st.error(err)
                if c3.button(f"-{step_small} {unit}", key=f"minus_s_{ing['id']}"):
                    err = adjust_stock(ing["id"], -step_small)
                    st.experimental_rerun() if not err else st.error(err)
                if c4.button(f"-{step_big} {unit}", key=f"minus_b_{ing['id']}"):
                    err = adjust_stock(ing["id"], -step_big)
                    st.experimental_rerun() if not err else st.error(err)

                # —Ä—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                delta = c5.number_input("¬±—á–∏—Å–ª–æ", value=0.0, step=1.0, key=f"delta_{ing['id']}")
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", key=f"apply_{ing['id']}"):
                    if delta != 0:
                        err = adjust_stock(ing["id"], float(delta))
                        if err:
                            st.error(err)
                        else:
                            st.success("–ò–∑–º–µ–Ω–µ–Ω–æ")
                            time.sleep(0.4)
                            st.rerun()

                # —Å–ø—Ä–∞–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫/–Ω–æ—Ä–º—É/—Å—Ç–∞—Ç—É—Å
                st.caption(f"–û—Å—Ç–∞—Ç–æ–∫: **{int(cur)} {unit}** / –Ω–æ—Ä–º–∞ **{int(cap)} {unit}** ‚Äî {status_label(percent)}")
                st.write("")

        with right_col:
            st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–æ–≤")
            low25 = []
            low50 = []
            for ing in ings:
                cap = ing.get("capacity") or DEFAULT_CAPACITY.get(ing["id"], 0.0)
                cur = float(ing["stock_quantity"])
                p = (cur / cap * 100.0) if cap > 0 else 0.0
                if p < 25:
                    low25.append(f"{ing['name']}: –æ—Å—Ç–∞–ª–æ—Å—å {int(cur)} / {int(cap)}")
                elif p < 50:
                    low50.append(f"{ing['name']}: –æ—Å—Ç–∞–ª–æ—Å—å {int(cur)} / {int(cap)}")

            if st.button("–≠–∫—Å–ø–æ—Ä—Ç <25%"):
                if not low25:
                    st.info("–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ ‚â• 25% üëç")
                else:
                    st.code("\n".join(low25))
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç <50%"):
                if not low50:
                    st.info("–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ ‚â• 50% üëç")
                else:
                    st.code("\n".join(low50))
