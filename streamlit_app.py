# -*- coding: utf-8 -*-
# gipsy-office ‚Äî —É—á—ë—Ç —Ç–æ–≤–∞—Ä–æ–≤ (Streamlit + Firestore)
import os
import json
import time
from typing import Any, Dict, List, Optional
from collections.abc import Mapping

import streamlit as st
from firebase_admin import credentials, initialize_app, _apps as firebase_apps
from google.cloud import firestore


# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–ª–∞–¥–∞ (–Ω–æ—Ä–º—ã)
# -------------------------------
DEFAULT_CAPACITY: Dict[str, float] = {
    "beans": 2000.0,   # –≥—Ä–∞–º–º
    "milk": 5000.0,    # –º–ª
}


# -------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firestore
# -------------------------------
def init_firestore() -> firestore.Client:
    """–ß–∏—Ç–∞–µ—Ç –∫–ª—é—á –∏–∑ secrets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç firestore.Client."""
    project_id = (st.secrets.get("PROJECT_ID") or os.getenv("PROJECT_ID") or "").strip()
    svc_raw = st.secrets.get("FIREBASE_SERVICE_ACCOUNT", None)

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    st.sidebar.write("üîç Secrets:")
    st.sidebar.write(f"- PROJECT_ID: {project_id or '‚ùå –Ω–µ—Ç'}")
    st.sidebar.write(f"- FIREBASE_SERVICE_ACCOUNT type: {type(svc_raw).__name__}")

    if not project_id:
        st.error("‚ùå –í secrets –Ω–µ—Ç PROJECT_ID. –î–æ–±–∞–≤—å `PROJECT_ID = \"gipsy-office\"`.")
        st.stop()

    if svc_raw is None:
        st.error("‚ùå –í secrets –Ω–µ—Ç FIREBASE_SERVICE_ACCOUNT.")
        st.stop()

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º AttrDict, dict, JSON-—Å—Ç—Ä–æ–∫—É
    if isinstance(svc_raw, Mapping):
        svc = dict(svc_raw)
    elif isinstance(svc_raw, str):
        s = svc_raw.strip()
        try:
            svc = json.loads(s)
        except Exception:
            st.error("‚ùå FIREBASE_SERVICE_ACCOUNT –∑–∞–¥–∞–Ω —Å—Ç—Ä–æ–∫–æ–π, –Ω–æ —ç—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON.")
            st.stop()
    else:
        st.error(f"‚ùå FIREBASE_SERVICE_ACCOUNT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON-—Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–µ–π TOML (mapping). –ü–æ–ª—É—á–µ–Ω–æ: {type(svc_raw).__name__}")
        st.stop()

    # –ú–∏–Ω–∏-–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    st.sidebar.write(f"- has private_key: {bool(svc.get('private_key'))}")
    st.sidebar.write(f"- sa project_id: {svc.get('project_id', '‚Äî')}")

    # Firebase Admin init
    cred = credentials.Certificate(svc)
    if not firebase_apps:
        initialize_app(cred, {"projectId": project_id})

    try:
        db = firestore.Client(project=project_id, credentials=cred)
        return db
    except Exception as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Firestore: {e}")
        st.stop()


# –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
db = init_firestore()


# -------------------------------
# –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
# -------------------------------
def _ingredients_ref():
    return db.collection("ingredients")


def _products_ref():
    return db.collection("products")


def _recipes_ref():
    return db.collection("recipes")


def _sales_ref():
    return db.collection("sales")


# -------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å—ã
# -------------------------------
def status_label(percent: float) -> str:
    if percent >= 75:
        return "üü¢ –°—É–ø–µ—Ä"
    if percent >= 50:
        return "üü° –ù–æ—Ä–º"
    if percent >= 25:
        return "üü† –ì–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–∫—É–ø–∫–µ"
    return "üî¥ –°—Ä–æ—á–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å"


# -------------------------------
# CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
# -------------------------------
def get_ingredients() -> List[Dict[str, Any]]:
    try:
        docs = _ingredients_ref().stream()
        return sorted([
            {
                "id": d.id,
                "name": d.to_dict().get("name", d.id),
                "stock_quantity": float(d.to_dict().get("stock_quantity", 0)),
                "unit": d.to_dict().get("unit", "g" if d.id == "beans" else "ml"),
                "capacity": float(d.to_dict().get("capacity", DEFAULT_CAPACITY.get(d.id, 0))),
            }
            for d in docs
        ], key=lambda x: x["id"])
    except Exception as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Firestore (ingredients): {e.__class__.__name__}")
        st.stop()


def get_products() -> List[Dict[str, Any]]:
    try:
        docs = _products_ref().stream()
        return sorted([
            {
                "id": d.id,
                "name": d.to_dict().get("name", d.id),
                "price": float(d.to_dict().get("price", 0)),
            }
            for d in docs
        ], key=lambda x: x["name"].lower())
    except Exception as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Firestore (products): {e.__class__.__name__}")
        st.stop()


def get_recipe(product_id: str) -> List[Dict[str, Any]]:
    try:
        doc = _recipes_ref().document(product_id).get()
        if not doc.exists:
            return []
        return list(doc.to_dict().get("items", []))
    except Exception as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Firestore (recipes): {e.__class__.__name__}")
        st.stop()


def adjust_stock(ingredient_id: str, delta: float) -> Optional[str]:
    try:
        ref = _ingredients_ref().document(ingredient_id)
        snap = ref.get()
        cur = float((snap.to_dict() or {}).get("stock_quantity", 0))
        new_val = cur + delta
        if new_val < 0:
            return "‚ùå –ù–µ–ª—å–∑—è —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å."
        ref.update({"stock_quantity": new_val})
        return None
    except Exception as e:
        return str(e)


def sell_product(product_id: str) -> Optional[str]:
    try:
        recipe = get_recipe(product_id)
        if not recipe:
            return "–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏."
        for it in recipe:
            err = adjust_stock(it["ingredientId"], -float(it["qtyPer"]))
            if err:
                return err
        _sales_ref().document().set({
            "product_id": product_id,
            "ts": firestore.SERVER_TIMESTAMP,
            "items": recipe,
        })
        return None
    except Exception as e:
        return str(e)


def undo_last_sale() -> Optional[str]:
    try:
        q = _sales_ref().order_by("ts", direction=firestore.Query.DESCENDING).limit(1).stream()
        last = next(q, None)
        if not last:
            return "–ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        sale = last.to_dict() or {}
        for it in sale.get("items", []):
            adjust_stock(it["ingredientId"], float(it["qtyPer"]))
        last.reference.delete()
        return None
    except Exception as e:
        return str(e)


# -------------------------------
# UI Streamlit
# -------------------------------
st.set_page_config(page_title="gipsy-office ‚Äî —É—á—ë—Ç", page_icon="‚òï", layout="wide")
st.title("‚òï gipsy-office ‚Äî —É—á—ë—Ç —Å–ø–∏—Å–∞–Ω–∏–π")

# –ü–µ—Ä–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
with st.expander("‚öôÔ∏è –ü–µ—Ä–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ / —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    if st.button("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        try:
            _ingredients_ref().document("beans").set({"name": "–ó—ë—Ä–Ω–∞", "stock_quantity": 2000, "unit": "g", "capacity": 2000})
            _ingredients_ref().document("milk").set({"name": "–ú–æ–ª–æ–∫–æ", "stock_quantity": 5000, "unit": "ml", "capacity": 5000})
            _products_ref().document("cappuccino").set({"name": "–ö–∞–ø—É—á–∏–Ω–æ", "price": 250})
            _recipes_ref().document("cappuccino").set({"items": [
                {"ingredientId": "beans", "qtyPer": 18},
                {"ingredientId": "milk", "qtyPer": 180}
            ]})
            st.success("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")

tab1, tab2 = st.tabs(["–ü–æ–∑–∏—Ü–∏–∏", "–°–∫–ª–∞–¥"])

# --- –ü–æ–∑–∏—Ü–∏–∏ ---
with tab1:
    prods = get_products()
    if not prods:
        st.info("–î–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ Firestore.")
    else:
        for p in prods:
            c1, c2, c3 = st.columns([4, 2, 2])
            c1.write(f"**{p['name']}**")
            c2.write(f"{int(p['price'])} ‚ÇΩ")
            if c3.button("–°–ø–∏—Å–∞—Ç—å", key=f"sell_{p['id']}"):
                err = sell_product(p["id"])
                if err:
                    st.error(err)
                else:
                    st.success("‚úÖ –°–ø–∏—Å–∞–Ω–æ!")
                    st.rerun()
    st.divider()
    if st.button("‚Ü©Ô∏è Undo –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏"):
        err = undo_last_sale()
        if err:
            st.error(err)
        else:
            st.success("‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            st.rerun()

# --- –°–∫–ª–∞–¥ ---
with tab2:
    ing = get_ingredients()
    if not ing:
        st.info("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ.")
    else:
        left, right = st.columns([2, 1])
        with left:
            st.subheader("üì¶ –°–∫–ª–∞–¥")
            for i in ing:
                cur = i["stock_quantity"]
                cap = i["capacity"] or DEFAULT_CAPACITY.get(i["id"], 1)
                pct = round(100 * cur / cap)
                st.markdown(f"**{i['name']}** ‚Äî {pct}% ({int(cur)} / {int(cap)} {i['unit']}) ‚Äî {status_label(pct)}")
                c1, c2, c3, c4 = st.columns(4)
                if c1.button("+50", key=f"p50_{i['id']}"): adjust_stock(i["id"], 50); st.rerun()
                if c2.button("-50", key=f"m50_{i['id']}"): adjust_stock(i["id"], -50); st.rerun()
                if c3.button("+100", key=f"p100_{i['id']}"): adjust_stock(i["id"], 100); st.rerun()
                if c4.button("-100", key=f"m100_{i['id']}"): adjust_stock(i["id"], -100); st.rerun()
                st.write("")
        with right:
            st.subheader("üìâ –ù–µ–¥–æ—Å—Ç–∞—á–∏")
            low = [x for x in ing if x["stock_quantity"] / x["capacity"] < 0.5]
            if not low:
                st.success("–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ!")
            else:
                for x in low:
                    p = round(100 * x["stock_quantity"] / x["capacity"])
                    st.warning(f"{x['name']}: {p}%")
