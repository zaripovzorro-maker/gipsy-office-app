from __future__ import annotations

import json
from datetime import datetime
from typing import Dict, List, Any

import streamlit as st
from google.cloud import firestore
import firebase_admin
from firebase_admin import credentials


# ============== Firestore init (—Å–µ–∫—Ä–µ—Ç—ã) =================

def _read_firebase_service_account() -> Dict:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ Secrets:
      A) TOML-—Ç–∞–±–ª–∏—Ü–∞:
         [FIREBASE_SERVICE_ACCOUNT]
         type="service_account"
         ...
         private_key = """-----BEGIN... (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫) ... END-----"""
      B) JSON-—Å—Ç—Ä–æ–∫–∞:
         FIREBASE_SERVICE_ACCOUNT = "{\"type\":\"service_account\",...,\"private_key\":\"-----BEGIN...\\n...\\nEND-----\\n\"}"
    """
    if "FIREBASE_SERVICE_ACCOUNT" not in st.secrets:
        raise RuntimeError("–í Secrets –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç FIREBASE_SERVICE_ACCOUNT.")

    svc = st.secrets["FIREBASE_SERVICE_ACCOUNT"]

    # –í–∞—Ä–∏–∞–Ω—Ç B: JSON-—Å—Ç—Ä–æ–∫–∞
    if isinstance(svc, str):
        try:
            data = json.loads(svc)
        except Exception:
            raise RuntimeError("FIREBASE_SERVICE_ACCOUNT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON-—Å—Ç—Ä–æ–∫–æ–π (–≤–∞–ª–∏–¥–Ω—ã–π JSON) –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–µ–π TOML.")
        # –µ—Å–ª–∏ –≤ –∫–ª—é—á–µ –ª–∏—Ç–µ—Ä–∞–ª—ã \n ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
        pk = data.get("private_key", "")
        if "\\n" in pk and "\n" not in pk:
            data["private_key"] = pk.replace("\\n", "\n")
        return data

    # –í–∞—Ä–∏–∞–Ω—Ç A: —Ç–∞–±–ª–∏—Ü–∞ TOML (dict)
    if isinstance(svc, dict):
        data = dict(svc)
        pk = data.get("private_key", "")
        # –î–ª—è TOML –≤—Å—ë –¥–æ–ª–∂–Ω–æ —É–∂–µ –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ ‚Äî –ù–ò–ß–ï–ì–û –Ω–µ –º–µ–Ω—è–µ–º.
        # –õ—ë–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–ø–∫–∏:
        if not str(pk).startswith("-----BEGIN PRIVATE KEY-----"):
            raise RuntimeError("private_key (TOML) –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -----BEGIN PRIVATE KEY-----")
        return data

    raise RuntimeError("FIREBASE_SERVICE_ACCOUNT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON-—Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–µ–π TOML.")


@st.cache_resource(show_spinner=False)
def init_firestore() -> firestore.Client:
    project_id = st.secrets.get("PROJECT_ID", "")
    if not project_id:
        raise RuntimeError("–í Secrets –Ω–µ—Ç PROJECT_ID.")

    data = _read_firebase_service_account()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è firebase_admin —Ä–æ–≤–Ω–æ 1 —Ä–∞–∑
    if not firebase_admin._apps:
        cred = credentials.Certificate(data)
        firebase_admin.initialize_app(cred, {"projectId": project_id})

    return firestore.Client(project=project_id)


# ============== –≤—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ –¥–ª—è UI & –¥–∞–Ω–Ω—ã—Ö =================

def badge(text: str, color: str = "gray"):
    st.markdown(
        f"<span style='background:{color};color:white;padding:2px 8px;border-radius:8px;font-size:12px'>"
        f"{text}</span>",
        unsafe_allow_html=True,
    )


def ensure_state():
    if "cart" not in st.session_state:
        st.session_state.cart: List[Dict[str, Any]] = []
    if "active_category" not in st.session_state:
        st.session_state.active_category = None
    if "active_product" not in st.session_state:
        st.session_state.active_product = None


# --------- –≤—ã–±–æ—Ä–∫–∏ –∏–∑ Firestore ---------

def get_products(db: firestore.Client) -> List[Dict[str, Any]]:
    docs = db.collection("products").stream()
    res = []
    for d in docs:
        item = d.to_dict()
        item["id"] = d.id
        # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
        # {
        #   "category": "–ö–æ—Ñ–µ",
        #   "name": "–ö–∞–ø—É—á–∏–Ω–æ",
        #   "sizes": [{"name":"S","label":"250 –º–ª","price":150,"mult":1.0}, ...],
        #   "recipe": {"beans": 16, "milk": 150}  # –±–∞–∑–æ–≤–∞—è –¥–æ–∑–∞
        # }
        res.append(item)
    return res


def get_ingredients(db: firestore.Client) -> List[Dict[str, Any]]:
    docs = db.collection("ingredients").stream()
    res = []
    for d in docs:
        item = d.to_dict()
        item["id"] = d.id
        # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
        # { "name":"–ó—ë—Ä–Ω–∞", "unit":"g", "stock_quantity": 1200, "reorder_threshold": 200 }
        res.append(item)
    return res


# --------- –ø—Ä–æ–¥–∞–∂–∏ ---------

def ui_sales(db: firestore.Client):
    ensure_state()
    st.title("gipsy office ‚Äî –ø—Ä–æ–¥–∞–∂–∏")
    st.info("–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´–ö—É–ø–∏—Ç—å¬ª. –î–æ —ç—Ç–æ–≥–æ –ø–æ–∑–∏—Ü–∏–∏ –ª–µ–∂–∞—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è.")

    products = get_products(db)
    if not products:
        st.warning("–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ `products` –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–ø–∏—Ç–∫–∏ (category, name, sizes[], recipe{}) –≤ Firestore.")
        return

    # –ö–æ—Ä–∑–∏–Ω–∞ —Å–ø—Ä–∞–≤–∞
    cart_col = st.sidebar if st.session_state.get("cart_on_sidebar", False) else None
    right = st.container()
    left, right = st.columns([2, 1])

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = sorted({p.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") for p in products})
    with left:
        st.subheader("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        cat_cols = st.columns(min(len(categories), 4) or 1)
        for i, cat in enumerate(categories):
            with cat_cols[i % len(cat_cols)]:
                is_active = (st.session_state.active_category == cat)
                btn = st.button(
                    f"üç± {cat}",
                    use_container_width=True,
                    type="primary" if is_active else "secondary",
                    key=f"cat_{cat}"
                )
                if btn:
                    st.session_state.active_category = cat
                    st.session_state.active_product = None

        st.markdown("---")

        if st.session_state.active_category:
            st.subheader(f"–ù–∞–ø–∏—Ç–∫–∏ ‚Äî {st.session_state.active_category}")
            prods = [p for p in products if p.get("category") == st.session_state.active_category]
            if not prods:
                st.write("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.")
            else:
                grid = st.columns(3)
                for i, p in enumerate(prods):
                    with grid[i % 3]:
                        is_selected = (st.session_state.active_product == p.get("id"))
                        st.markdown(
                            f"""
                            <div style="
                                border:2px solid {'#3b82f6' if is_selected else '#e5e7eb'};
                                border-radius:14px;padding:12px;margin-bottom:12px;">
                                <div style="font-weight:600">{p.get('name','–ë–µ–∑ –∏–º–µ–Ω–∏')}</div>
                                <div style="font-size:12px;color:#6b7280">{p.get('category','')}</div>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                        if st.button("–í—ã–±—Ä–∞—Ç—å", key=f"pick_{p['id']}", use_container_width=True):
                            st.session_state.active_product = p["id"]

                # –û–±—ä—ë–º—ã/—Ä–∞–∑–º–µ—Ä—ã
                st.markdown("---")
                if st.session_state.active_product:
                    prod = next((x for x in products if x["id"] == st.session_state.active_product), None)
                    if prod:
                        st.subheader(f"{prod.get('name')}: –æ–±—ä—ë–º/—Ü–µ–Ω–∞")
                        sizes: List[Dict[str, Any]] = prod.get("sizes", [])
                        scols = st.columns(min(len(sizes), 4) or 1)
                        for i, s in enumerate(sizes):
                            with scols[i % len(scols)]:
                                label = s.get("label", s.get("name", ""))
                                price = s.get("price", 0)
                                pressed = st.button(f"{label}\n{price} ‚ÇΩ",
                                                    key=f"size_{prod['id']}_{i}",
                                                    use_container_width=True)
                                if pressed:
                                    st.session_state.cart.append({
                                        "product_id": prod["id"],
                                        "product_name": prod.get("name", ""),
                                        "size_name": s.get("name", ""),
                                        "size_label": label,
                                        "price": price,
                                        "mult": float(s.get("mult", 1.0)),
                                    })
                                    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {prod.get('name')} ({label})")

    # –ö–æ—Ä–∑–∏–Ω–∞ —Å–ø—Ä–∞–≤–∞
    with right:
        st.subheader("üß∫ –ö–æ—Ä–∑–∏–Ω–∞")
        cart = st.session_state.cart
        if not cart:
            st.info("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–ø–∏—Ç–∫–∏ —Å–ª–µ–≤–∞.")
        else:
            total = 0
            for idx, it in enumerate(cart):
                c1, c2, c3 = st.columns([4, 2, 1])
                with c1:
                    st.write(f"**{it['product_name']}** ‚Äî {it['size_label']}")
                with c2:
                    st.write(f"{it['price']} ‚ÇΩ")
                with c3:
                    if st.button("‚úñ", key=f"rm_{idx}"):
                        cart.pop(idx)
                        st.experimental_rerun()
                total += it["price"]

            st.markdown("---")
            st.write(f"**–ò—Ç–æ–≥–æ:** {total} ‚ÇΩ")

            if st.button("–ö—É–ø–∏—Ç—å", type="primary", use_container_width=True):
                try:
                    _commit_sale(db, cart, products)
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂—É: {e}")
                else:
                    st.success("–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!")
                    st.session_state.cart = []
                    st.experimental_rerun()


# —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ä–µ—Ü–µ–ø—Ç–∞–º
def _commit_sale(db: firestore.Client, cart: List[Dict[str, Any]], products: List[Dict[str, Any]]):
    if not cart:
        return
    # –≥–æ—Ç–æ–≤–∏–º –∞–≥—Ä–µ–≥–∞—Ç —Å–ø–∏—Å–∞–Ω–∏–π –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
    to_deduct: Dict[str, float] = {}
    items = []

    for it in cart:
        prod = next((p for p in products if p["id"] == it["product_id"]), None)
        if not prod:
            continue
        mult = float(it.get("mult", 1.0))
        recipe: Dict[str, float] = prod.get("recipe", {})
        for ing_id, base_amount in recipe.items():
            to_deduct[ing_id] = to_deduct.get(ing_id, 0.0) + float(base_amount) * mult

        items.append({
            "product_id": it["product_id"],
            "name": it["product_name"],
            "size": it["size_label"],
            "price": it["price"],
        })

    # —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: —Å–ø–∏—Å–∞—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É
    @firestore.transactional
    def tx_op(tx: firestore.Transaction):
        # —Å–ø–∏—Å–∞–Ω–∏—è
        for ing_id, delta in to_deduct.items():
            ref = db.collection("ingredients").document(ing_id)
            snap = ref.get(transaction=tx)
            if not snap.exists:
                raise RuntimeError(f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç {ing_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            stock = float(snap.to_dict().get("stock_quantity", 0))
            new_stock = stock - delta
            if new_stock < -1e-6:
                raise RuntimeError(f"–ù–µ–ª—å–∑—è —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å –ø–æ {ing_id} (–Ω–∞–¥–æ {delta}, –æ—Å—Ç–∞—Ç–æ–∫ {stock}).")
            tx.update(ref, {"stock_quantity": new_stock})

        # –∑–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏
        sale_ref = db.collection("sales").document()
        tx.set(sale_ref, {
            "created_at": datetime.utcnow(),
            "items": items,
            "total": sum(i["price"] for i in items),
        })

    tx = db.transaction()
    tx_op(tx)


# --------- —Å–∫–ª–∞–¥ ---------

def _status_color(pct: float) -> str:
    if pct >= 0.75:
        return "#10b981"  # green
    if pct >= 0.5:
        return "#60a5fa"  # blue
    if pct >= 0.25:
        return "#f59e0b"  # amber
    return "#ef4444"      # red


def ui_stock(db: firestore.Client):
    st.title("–°–∫–ª–∞–¥")
    ing = get_ingredients(db)
    if not ing:
        st.info("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é `ingredients`.")
        return

    DEFAULT_CAPACITY = {i["id"]: max(float(i.get("stock_quantity", 0)), float(i.get("reorder_threshold", 0)) * 4 or 1)
                        for i in ing}

    for item in ing:
        cap = DEFAULT_CAPACITY.get(item["id"], 1.0)
        stock = float(item.get("stock_quantity", 0))
        pct = stock / cap if cap > 0 else 0
        color = _status_color(pct)

        with st.container():
            st.markdown(
                f"<div style='border:1px solid #e5e7eb;border-radius:12px;padding:12px;margin-bottom:10px'>"
                f"<div style='display:flex;justify-content:space-between;align-items:center'>"
                f"<div><b>{item.get('name','')}</b> "
                f"<span style='color:#6b7280'>(–Ω–æ—Ä–º–∞ {int(cap)} {item.get('unit','')})</span></div>"
                f"<div style='color:{color}'><b>{int(pct*100)}%</b></div>"
                f"</div></div>", unsafe_allow_html=True
            )

            c1, c2, c3, c4, c5 = st.columns([1, 1, 1, 2, 2])
            if c1.button("+", key=f"plus_{item['id']}"):
                _adj_stock(db, item["id"], +50)
            if c2.button("-", key=f"minus_{item['id']}"):
                _adj_stock(db, item["id"], -50)
            delta = c3.number_input("¬±", key=f"delta_{item['id']}", step=10, value=0)
            if c4.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", key=f"apply_{item['id']}"):
                _adj_stock(db, item["id"], float(delta))
            c5.write(f"–û—Å—Ç–∞—Ç–æ–∫: **{int(stock)} {item.get('unit','')}**")


def _adj_stock(db: firestore.Client, ing_id: str, delta: float):
    @firestore.transactional
    def tx_op(tx: firestore.Transaction):
        ref = db.collection("ingredients").document(ing_id)
        snap = ref.get(transaction=tx)
        if not snap.exists:
            raise RuntimeError("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        stock = float(snap.to_dict().get("stock_quantity", 0))
        new_stock = stock + delta
        if new_stock < -1e-6:
            raise RuntimeError("–ù–µ–ª—å–∑—è —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å.")
        tx.update(ref, {"stock_quantity": new_stock})

    tx = db.transaction()
    tx_op(tx)


# --------- —Ä–µ—Ü–µ–ø—Ç—ã ---------

def ui_recipes(db: firestore.Client):
    st.title("–†–µ—Ü–µ–ø—Ç—ã")
    prods = get_products(db)
    ing = get_ingredients(db)
    ing_map = {i["id"]: i for i in ing}

    if not prods:
        st.info("–ü—É—Å—Ç–æ –≤ `products`.")
        return

    for p in prods:
        with st.expander(f"{p.get('category','?')} ‚Ä¢ {p.get('name','?')}", expanded=False):
            recipe: Dict[str, float] = dict(p.get("recipe", {}))
            st.write("**–ë–∞–∑–æ–≤–∞—è –¥–æ–∑–∞ (–¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —Å mult=1.0):**")
            # –ø–æ–∫–∞–∑ —Ä–µ—Ü–µ–ø—Ç–∞
            for ing_id, amount in recipe.items():
                row = st.columns([3, 2, 1])
                with row[0]:
                    st.write(ing_map.get(ing_id, {}).get("name", ing_id))
                with row[1]:
                    new_amount = st.number_input("–≥/–º–ª", value=float(amount), key=f"rcp_{p['id']}_{ing_id}")
                    recipe[ing_id] = new_amount
                with row[2]:
                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"rcp_del_{p['id']}_{ing_id}"):
                        recipe.pop(ing_id, None)
                        _save_product_recipe(db, p["id"], recipe)
                        st.experimental_rerun()

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            st.markdown("---")
            c1, c2, c3 = st.columns([3, 2, 1])
            with c1:
                add_ing = st.selectbox("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", options=["‚Äî"] + [i["id"] for i in ing],
                                       format_func=lambda x: "‚Äî" if x == "‚Äî" else ing_map[x]["name"],
                                       key=f"add_ing_{p['id']}")
            with c2:
                add_amt = st.number_input("–î–æ–∑–∞", min_value=0.0, value=0.0, step=1.0, key=f"add_amt_{p['id']}")
            with c3:
                if st.button("–î–æ–±–∞–≤–∏—Ç—å", key=f"add_btn_{p['id']}") and add_ing != "‚Äî" and add_amt > 0:
                    recipe[add_ing] = add_amt
                    _save_product_recipe(db, p["id"], recipe)
                    st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
                    st.experimental_rerun()

            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", key=f"save_{p['id']}"):
                _save_product_recipe(db, p["id"], recipe)
                st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


def _save_product_recipe(db: firestore.Client, prod_id: str, recipe: Dict[str, float]):
    db.collection("products").document(prod_id).update({"recipe": recipe})


# --------- –ø–æ—Å—Ç–∞–≤–∫–∏ ---------

def ui_deliveries(db: firestore.Client):
    st.title("–ü–æ—Å—Ç–∞–≤–∫–∏ (–ø—Ä–∏—Ö–æ–¥ –Ω–∞ —Å–∫–ª–∞–¥)")
    ing = get_ingredients(db)
    if not ing:
        st.info("–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")
        return
    ing_map = {i["name"]: i for i in ing}
    names = sorted(ing_map.keys())

    with st.form("delivery_form", clear_on_submit=True):
        name = st.selectbox("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç", names)
        qty = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞)", min_value=0.0, step=10.0)
        dt = st.date_input("–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏", value=datetime.utcnow().date())
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—Ö–æ–¥")
        if submitted and qty > 0:
            item = ing_map[name]
            _adj_stock(db, item["id"], float(qty))
            db.collection("deliveries").add({
                "ingredient_id": item["id"],
                "name": item["name"],
                "qty": float(qty),
                "at": datetime(dt.year, dt.month, dt.day),
            })
            st.success("–ü–æ—Å—Ç–∞–≤–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")

    # –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏
    st.markdown("---")
    st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏")
    docs = db.collection("deliveries").order_by("at", direction=firestore.Query.DESCENDING).limit(20).stream()
    rows = []
    for d in docs:
        r = d.to_dict()
        rows.append([r.get("name"), r.get("qty"), r.get("at")])
    if rows:
        st.table(rows)
    else:
        st.write("–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")


# ===================== main =====================

def secrets_check():
    st.sidebar.markdown("### ‚úÖ Secrets check")
    ok = True
    def row(label, cond):
        nonlocal ok
        ok = ok and cond
        st.sidebar.write(f"‚Ä¢ {label}: {'üü© True' if cond else 'üü• False'}")

    row("PROJECT_ID present", "PROJECT_ID" in st.secrets)
    has = "FIREBASE_SERVICE_ACCOUNT" in st.secrets
    row("FIREBASE_SERVICE_ACCOUNT type: str", has and isinstance(st.secrets["FIREBASE_SERVICE_ACCOUNT"], str))
    # –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ ‚Äî —Ç–æ–∂–µ –æ–∫
    if has and isinstance(st.secrets["FIREBASE_SERVICE_ACCOUNT"], dict):
        st.sidebar.write("‚Ä¢ FIREBASE_SERVICE_ACCOUNT type: dict (ok)")
    # –ª—ë–≥–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    try:
        svc = st.secrets["FIREBASE_SERVICE_ACCOUNT"]
        if isinstance(svc, str):
            data = json.loads(svc)
        else:
            data = dict(svc)
        pk = data.get("private_key", "")
        st.sidebar.write(f"‚Ä¢ private_key length:  {len(pk)}")
        st.sidebar.write(f"‚Ä¢ starts with BEGIN:   {pk.startswith('-----BEGIN PRIVATE KEY-----')}")
        st.sidebar.write(f"‚Ä¢ contains \\n literal: {'\\n' in pk}")
    except Exception:
        st.sidebar.write("‚Ä¢ private_key: (–Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω)")

    st.sidebar.markdown("---")
    st.sidebar.markdown("### –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    st.sidebar.write("‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ ‚Ä¢ –°–∫–ª–∞–¥ ‚Ä¢ –†–µ—Ü–µ–ø—Ç—ã ‚Ä¢ –ü–æ—Å—Ç–∞–≤–∫–∏ (—Å–º. –≤–µ—Ä—Ö–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏, –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ –ø–æ–∑–∂–µ)")


def main():
    st.set_page_config(page_title="gipsy office ‚Äî —É—á—ë—Ç", page_icon="‚òï", layout="wide")
    secrets_check()

    # Firestore
    try:
        db = init_firestore()
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firestore: {e}")
        return

    tabs = st.tabs(["–ü—Ä–æ–¥–∞–∂–∏", "–°–∫–ª–∞–¥", "–†–µ—Ü–µ–ø—Ç—ã", "–ü–æ—Å—Ç–∞–≤–∫–∏"])

    with tabs[0]:
        ui_sales(db)
    with tabs[1]:
        ui_stock(db)
    with tabs[2]:
        ui_recipes(db)
    with tabs[3]:
        ui_deliveries(db)


if __name__ == "__main__":
    main()
