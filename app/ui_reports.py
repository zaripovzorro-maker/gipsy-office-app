import streamlit as st
from google.cloud import firestore

from app.services.inventory import fetch_inventory
from app.logic.thresholds import inv_status
from app.utils.format import fmt_money_kop


def render_reports(db: firestore.Client):
    st.subheader("–†–µ—Ü–µ–ø—Ç—ã ‚Ä¢ –û—Ç—á—ë—Ç—ã (MVP)")

    col1, col2 = st.columns(2)
    with col1:
        st.caption("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –ø—Ä–æ–¥–∞–∂:")
        sales = list(
            db.collection("sales")
            .order_by("created_at", direction=firestore.Query.DESCENDING)
            .limit(30)
            .stream()
        )
        if not sales:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂.")
        else:
            for s in sales:
                d = s.to_dict()
                st.write(f"- **{fmt_money_kop(int(d.get('total_amount',0)))}**, –ø–æ–∑–∏—Ü–∏–π: {len(d.get('items',[]))}")

    with col2:
        st.caption("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ –∏—Å—Ö–æ–¥–µ (üü†/üî¥):")
        inv = fetch_inventory(db)
        danger = []
        for x in inv.values():
            icon, ratio = inv_status(x["capacity"], x["current"])
            if icon in ("üü†", "üî¥"):
                danger.append(f"{icon} {x['name']} ‚Äî {x['current']}/{x['capacity']} {x['unit']}")
        if not danger:
            st.success("–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç.")
        else:
            for line in danger:
                st.write("‚Ä¢ " + line)
