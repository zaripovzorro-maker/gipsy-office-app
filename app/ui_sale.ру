from __future__ import annotations
import streamlit as st
from typing import Dict, Any, List, Tuple
from google.cloud import firestore
from app.services.products import list_categories, list_products_by_category
from app.services.sales import check_and_commit_sale
from app.logic.calc import price_of_item
from app.utils.format import money

def _get_cart() -> List[Dict[str,Any]]:
    if "cart" not in st.session_state:
        st.session_state.cart = []
    return st.session_state.cart

def render_sale(db: firestore.Client):
    st.subheader("–ü—Ä–æ–¥–∞–∂–∞")
    st.info("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É. –°–ø–∏—Å–∞–Ω–∏–µ —Å–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ö—É–ø–∏—Ç—å¬ª.")

    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cats = list_categories(db)
    if not cats:
        st.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é `products` –∏ `recipes`.")
        return

    if "active_cat" not in st.session_state:
        st.session_state.active_cat = cats[0]

    cat_cols = st.columns(min(5, len(cats)))
    for i, c in enumerate(cats):
        if cat_cols[i % len(cat_cols)].button(c, key=f"cat_{c}", type=("primary" if c==st.session_state.active_cat else "secondary")):
            st.session_state.active_cat = c

    st.write("---")
    st.caption(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{st.session_state.active_cat}**")

    # –ø—Ä–æ–¥—É–∫—Ç—ã
    prods = list_products_by_category(db, st.session_state.active_cat)
    grid = st.columns(3)
    for idx, (pid, p) in enumerate(prods):
        with grid[idx % 3]:
            with st.container(border=True):
                st.write(f"**{p.get('name','–ë–µ–∑ –∏–º–µ–Ω–∏')}**")
                volumes: List[int] = p.get("volumes") or []
                base_price = int(p.get("base_price",0))
                addons = p.get("addons") or []

                # –æ–±—ä—ë–º
                v = st.selectbox("–û–±—ä—ë–º (–º–ª)", volumes, key=f"v_{pid}")
                # –¥–æ–±–∞–≤–∫–∏
                add_ids = []
                if addons:
                    st.caption("–î–æ–±–∞–≤–∫–∏:")
                    for a in addons:
                        if st.checkbox(f"{a['name']} (+{money(a['price_delta'])})", key=f"ad_{pid}_{a['id']}"):
                            add_ids.append(a["id"])

                qty = st.number_input("–ö–æ–ª-–≤–æ", min_value=1, max_value=20, value=1, key=f"q_{pid}")
                if st.button("–í –∫–æ—Ä–∑–∏–Ω—É", key=f"add_{pid}", use_container_width=True):
                    _get_cart().append({
                        "product_id": pid,
                        "product_name": p.get("name",""),
                        "volume_ml": int(v),
                        "qty": int(qty),
                        "addons": add_ids,
                        "base_price": int(base_price),
                        "product_doc": p,
                    })
                    st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")

    st.write("---")
    st.subheader("üß∫ –ö–æ—Ä–∑–∏–Ω–∞")
    cart = _get_cart()
    if not cart:
        st.info("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    total = 0
    for i, it in enumerate(cart):
        c1, c2, c3, c4 = st.columns([5,2,2,1])
        with c1: st.write(f"{it['product_name']} ‚Äî {it['volume_ml']} –º–ª")
        with c2: st.write(money(price_of_item(it)))
        with c3:
            new_q = st.number_input("qty", 1, 50, it["qty"], key=f"qty_{i}", label_visibility="collapsed")
            it["qty"] = int(new_q)
        with c4:
            if st.button("‚úñ", key=f"rm_{i}"):
                cart.pop(i); st.experimental_rerun()
        total += price_of_item(it)

    st.write(f"**–ò—Ç–æ–≥–æ:** {money(total)}")
    if st.button("–ö—É–ø–∏—Ç—å ‚úÖ", type="primary"):
        res = check_and_commit_sale(db, cart)
        if not res.get("ok"):
            st.error(res.get("error","–û—à–∏–±–∫–∞"))
        else:
            st.success(f"–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –Ω–∞ {money(res['total_amount'])}")
            st.session_state.cart = []
            st.experimental_rerun()

