from __future__ import annotations
import json
import streamlit as st
import firebase_admin
from firebase_admin import credentials
from google.cloud import firestore
from typing import Dict, Any

def _read_service_account() -> Dict[str, Any]:
    if "FIREBASE_SERVICE_ACCOUNT" not in st.secrets:
        raise RuntimeError("–í Secrets –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç FIREBASE_SERVICE_ACCOUNT.")
    raw = st.secrets["FIREBASE_SERVICE_ACCOUNT"]

    # JSON-—Å—Ç—Ä–æ–∫–∞
    if isinstance(raw, str):
        data = json.loads(raw)
        pk = data.get("private_key", "")
        if "\\n" in pk and "\n" not in pk:
            data["private_key"] = pk.replace("\\n", "\n")
        return data

    # TOML-—Ç–∞–±–ª–∏—Ü–∞ (dict)
    if isinstance(raw, dict):
        data = dict(raw)
        pk = data.get("private_key", "")
        if not str(pk).startswith("-----BEGIN PRIVATE KEY-----"):
            raise RuntimeError("private_key (TOML) –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -----BEGIN PRIVATE KEY-----")
        return data

    raise RuntimeError("FIREBASE_SERVICE_ACCOUNT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON-—Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–µ–π TOML.")

@st.cache_resource(show_spinner=False)
def get_db() -> firestore.Client:
    project_id = st.secrets.get("PROJECT_ID", "").strip()
    if not project_id:
        raise RuntimeError("–í Secrets –Ω–µ—Ç PROJECT_ID.")
    data = _read_service_account()

    if not firebase_admin._apps:
        cred = credentials.Certificate(data)
        firebase_admin.initialize_app(cred, {"projectId": project_id})

    return firestore.Client(project=project_id)

def secrets_diag():
    st.markdown("### üîç Secrets")
    ok1 = bool(st.secrets.get("PROJECT_ID"))
    st.write("‚Ä¢ PROJECT_ID:", "‚úÖ" if ok1 else "‚ùå")
    exist = "FIREBASE_SERVICE_ACCOUNT" in st.secrets
    st.write("‚Ä¢ FIREBASE_SERVICE_ACCOUNT:", "‚úÖ" if exist else "‚ùå")
    if exist:
        raw = st.secrets["FIREBASE_SERVICE_ACCOUNT"]
        t = type(raw).__name__
        st.write("‚Ä¢ type:", t)
        try:
            if isinstance(raw, str):
                d = json.loads(raw)
            else:
                d = dict(raw)
            pk = d.get("private_key", "")
            st.write(f"‚Ä¢ private_key length: {len(pk)}")
            st.write("‚Ä¢ starts with BEGIN:", "‚úÖ" if str(pk).startswith("-----BEGIN PRIVATE KEY-----") else "‚ùå")
            st.write("‚Ä¢ contains \\n literal:", "‚úÖ" if isinstance(raw, str) and "\\n" in raw else "‚ûñ")
        except Exception:
            st.write("‚Ä¢ private_key: (–Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω)")

